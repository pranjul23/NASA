%simulator script to generate structure for
%explicit duration HSMM

clear;
clc;

%number of observation symbols
Nobs = 5;


%% =============== TRUE PARAMETERS ========================================

%number of hidden states
Nhid_true = 4;

%number of observation steps
Dmax_true = 7;


%initial state distribution
A0 = rand(Nhid_true,1);
A0_true = A0./sum(A0); %normalize

% pi = [1 0 0 0 0]';

%initial duration distribution
D0 = rand(Dmax_true,1);
D0_true = D0./sum(D0); %normalize


%========= transition distribution ==========
%element i,j,k is transition from j to i when d_{t-1} = k: p(i|j,k)

A1 = rand(Nhid_true);
for i=1:Nhid_true
    A1(:,i) = A1(:,i)/sum(A1(:,i));
end
%A1 = [[.3 .3 .4 0 0]' [0 0 0 1 0]' [0 0 .2 .8 0]' [0 .4 0 0 .6]' [0 0 1 0 0]'];

A_true = cat(3, A1, eye(Nhid_true));
for i=3:Dmax_true
    A_true = cat(3, A_true, eye(Nhid_true));
end

%========= duration distribution ============
%element i,j is duration of i time units, given we are in state j and d_{t-1} = k

D1 = rand(Dmax_true, Nhid_true);
for i=1:Nhid_true
    D1(:,i) = D1(:,i)/sum(D1(:,i));
end
%D1 = [[.1 .1 .5 .3 0 0 0]' [0 0 0 .2 .8 0 0]' [0 0 0 0 .4 .4 .2]' [.1 .3 .3 .3 0 0 0]' [0 0 0 0 .3 .7 0]'];

tmp = ones(1, Nhid_true);
M = [tmp; zeros(Dmax_true-1, Nhid_true)];
D_true = cat(3, D1, M);

for i=2:Dmax_true-1
    M = [zeros(i-1, Nhid_true); tmp; zeros(Dmax_true-i, Nhid_true)];
    D_true = cat(3, D_true, M);
end

%========= observation distribution =========
%element i,j is observation of symbol i, given we are in state j and d_{t-1} = k

%O = eye(Nhid, Nhid);
%O = [O1; zeros(1, Nhid)];

O_true = rand(Nobs, Nhid_true);
for i=1:Nhid_true
    O_true(:,i) = O_true(:,i)/sum(O_true(:,i));
end

%% ================ INIT PARAMETERS =======================================

%number of hidden states
Nhid_init = 4;

%number of observation steps
Dmax_init = 7;


%initial state distribution
A0 = rand(Nhid_init,1);
A0_init = A0./sum(A0); %normalize

% pi = [1 0 0 0 0]';

%initial duration distribution
D0 = rand(Dmax_init,1);
D0_init = D0./sum(D0); %normalize


%========= transition distribution ==========
%element i,j,k is transition from j to i when d_{t-1} = k: p(i|j,k)

A1 = rand(Nhid_init);
for i=1:Nhid_init
    A1(:,i) = A1(:,i)/sum(A1(:,i));
end
%A1 = [[.3 .3 .4 0 0]' [0 0 0 1 0]' [0 0 .2 .8 0]' [0 .4 0 0 .6]' [0 0 1 0 0]'];

A_init = cat(3, A1, eye(Nhid_init));
for i=3:Dmax_init
    A_init = cat(3, A_init, eye(Nhid_init));
end

%========= duration distribution ============
%element i,j is duration of i time units, given we are in state j and d_{t-1} = k

D1 = rand(Dmax_init, Nhid_init);
for i=1:Nhid_init
    D1(:,i) = D1(:,i)/sum(D1(:,i));
end
%D1 = [[.1 .1 .5 .3 0 0 0]' [0 0 0 .2 .8 0 0]' [0 0 0 0 .4 .4 .2]' [.1 .3 .3 .3 0 0 0]' [0 0 0 0 .3 .7 0]'];

tmp = ones(1, Nhid_init);
M = [tmp; zeros(Dmax_init-1, Nhid_init)];
D_init = cat(3, D1, M);

for i=2:Dmax_init-1
    M = [zeros(i-1, Nhid_init); tmp; zeros(Dmax_init-i, Nhid_init)];
    D_init = cat(3, D_init, M);
end

%========= observation distribution =========
%element i,j is observation of symbol i, given we are in state j 

O_init = rand(Nobs, Nhid_init);
for i=1:Nhid_init
    O_init(:,i) = O_init(:,i)/sum(O_init(:,i));
end

%% =============== ANOMALY PARAMETERS =====================================

%number of hidden states
Nhid_anom = 2;

%the larger the Nhid the larger the spread likelihood values of data



%number of observation steps
Dmax_anom = 7;

%initial state distribution
A0 = rand(Nhid_anom,1);
A0_anom = A0./sum(A0); %normalize

%initial duration distribution
D0 = rand(Dmax_anom,1);
D0_anom = D0./sum(D0); %normalize


%========= transition distribution ==========
%element i,j,k is transition from j to i when d_{t-1} = k: p(i|j,k)

A1 = rand(Nhid_anom);
for i=1:Nhid_anom
    A1(:,i) = A1(:,i)/sum(A1(:,i));
end
%A1 = [[.3 .3 .4 0 0]' [0 0 0 1 0]' [0 0 .2 .8 0]' [0 .4 0 0 .6]' [0 0 1 0 0]'];

A_anom = cat(3, A1, eye(Nhid_anom));
for i=3:Dmax_anom
    A_anom = cat(3, A_anom, eye(Nhid_anom));
end

%========= duration distribution ============
%element i,j is duration of i time units, given we are in state j and d_{t-1} = k

D1 = rand(Dmax_anom, Nhid_anom);
for i=1:Nhid_anom
    D1(:,i) = D1(:,i)/sum(D1(:,i));
end
%D1 = [[.1 .1 .5 .3 0 0 0]' [0 0 0 .2 .8 0 0]' [0 0 0 0 .4 .4 .2]' [.1 .3 .3 .3 0 0 0]' [0 0 0 0 .3 .7 0]'];

tmp = ones(1, Nhid_anom);
M = [tmp; zeros(Dmax_anom-1, Nhid_anom)];
D_anom = cat(3, D1, M);

for i=2:Dmax_anom-1
    M = [zeros(i-1, Nhid_anom); tmp; zeros(Dmax_anom-i, Nhid_anom)];
    D_anom = cat(3, D_anom, M);
end

%========= observation distribution =========
%element i,j is observation of symbol i, given we are in state j and d_{t-1} = k

O_anom = rand(Nobs, Nhid_anom);
for i=1:Nhid_anom
    O_anom(:,i) = O_anom(:,i)/sum(O_anom(:,i));
end




%==========================================================================
%write to factor graph file

fid = fopen('../libdai/examples/hsmm_factor_graph_init.fg', 'w');
fprintf(fid, '%d\n\n',5);


%factor: p(D0)
fprintf(fid, '%d\n', 1); %number of variables
fprintf(fid, '%d\n', 0); %variable ids in the factor
fprintf(fid, '%d\n', Dmax_true); %dim of variables in the factor
fprintf(fid, '%d\n', nnz(D0_true)); %number of nonzero elements

elem = D0_true;
nnzind = find(elem > 0);
nnzind = nnzind - ones(length(nnzind),1);
elem(elem==0)=[];

data = [nnzind elem];
fprintf(fid, '%d %.4g\n', data');

fprintf(fid, '\n');


%factor: p(A0)
fprintf(fid, '%d\n', 1); %number of variables
fprintf(fid, '%d\n', 1); %variable ids in the factor
fprintf(fid, '%d\n', Nhid_true); %dim of variables in the factor
fprintf(fid, '%d\n', nnz(A0_true)); %number of nonzero elements

elem = A0_true;
nnzind = find(elem > 0);
nnzind = nnzind - ones(length(nnzind),1);
elem(elem==0)=[];

data = [nnzind elem];
fprintf(fid, '%d %.4g\n', data');

fprintf(fid, '\n');



%factor: p(D1|A1, D0)
fprintf(fid, '%d\n', 3); %number of variables
fprintf(fid, '%d\t%d\t%d\n', 2, 3, 0); %variable ids in the factor
fprintf(fid, '%d\t%d\t%d\n', Dmax_true, Nhid_true, Dmax_true); %dim of variables in the factor
fprintf(fid, '%d\n', nnz(D_true)); %number of nonzero elements

elem = reshape(D_true, numel(D_true),1);
nnzind = find(elem > 0);
nnzind = nnzind - ones(length(nnzind),1);
elem(elem==0)=[];

data = [nnzind elem];
fprintf(fid, '%d %.4g\n', data');

fprintf(fid, '\n');




%factor: p(A1|A0, D0)
fprintf(fid, '%d\n', 3); %number of variables
fprintf(fid, '%d\t%d\t%d\n', 3, 1, 0); %variable ids in the factor
fprintf(fid, '%d\t%d\t%d\n', Nhid_true, Nhid_true, Dmax_true); %dim of variables in the factor
fprintf(fid, '%d\n', nnz(A_true)); %number of nonzero elements

elem = reshape(A_true, numel(A_true),1);
nnzind = find(elem > 0);
nnzind = nnzind - ones(length(nnzind),1);
elem(elem==0)=[];

data = [nnzind elem];
fprintf(fid, '%d %.4g\n', data');

fprintf(fid, '\n');




%factor: p(O1|A1)
fprintf(fid, '%d\n', 2); %number of variables
fprintf(fid, '%d\t%d\n', 4, 3); %variable ids in the factor
fprintf(fid, '%d\t%d\n', Nobs, Nhid_true); %dim of variables in the factor
fprintf(fid, '%d\n', nnz(O_true)); %number of nonzero elements

elem = reshape(O_true, numel(O_true),1);
nnzind = find(elem > 0);
nnzind = nnzind - ones(length(nnzind),1);
elem(elem==0)=[];

data = [nnzind elem];
fprintf(fid, '%d %.4g\n', data');

fprintf(fid, '\n');

fclose(fid);



%==========================================================================
%generate training sequence and write it to file

%simulation time
T = 200;

%number of obseration sequences
numSeq = 100;


fid = fopen('../libdai/examples/training.txt', 'w');
fprintf(fid, '%d\n',numSeq);



for i=1:numSeq
    
    prevState = randsample(1:Nhid_true, 1, true, A0_true);
    prevDur = randsample(1:Dmax_true, 1, true, D0_true);

    currTime = 1;
    observations = [];
    states = [];
    
    while(currTime <= T)
        
        %select curr state
        currState = randsample(1:Nhid_true, 1, true, A_true(:, prevState, prevDur))';
        
        %select duration (# of timesteps) until next observation
        dur = randsample(1:Dmax_true, 1, true, D_true(:,currState, prevDur))';
        
        %perform dur observations in current state
        currObs = randsample(1:Nobs, 1, true, O_true(:,currState))';
        
        %advance time
        currTime = currTime + 1;
        
        prevDur = dur;
        
        %save data
        states = [states, currState];
        observations = [observations, currObs-1];
    end
    
    lenObs = length(observations);
    fprintf(fid, '%d\n', lenObs);
    
    data = [4:3:3*lenObs+1; observations];
    
    format = repmat('%d\t', 1, lenObs-1);
    fprintf(fid,[format,'%d\n'], data');    
end

fclose(fid);

%==========================================================================
%generate testing sequences

%simulation time
T = 100;

%number of obseration sequences
numSeq = 1000;


fid = fopen('../libdai/examples/testing.txt', 'w');
fprintf(fid, '%d\n',numSeq);

%generate 10 normal sequences
for i=1:500
    
    prevState = randsample(1:Nhid_true, 1, true, A0_true);
    prevDur = randsample(1:Dmax_true, 1, true, D0_true);

    currTime = 1;
    observations = [];
    states = [];
    
    while(currTime <= T)
        
        %select curr state
        currState = randsample(1:Nhid_true, 1, true, A_true(:, prevState, prevDur))';
        
        %select duration (# of timesteps) until next observation
        dur = randsample(1:Dmax_true, 1, true, D_true(:,currState, prevDur))';
        
        %perform dur observations in current state
        currObs = randsample(1:Nobs, 1, true, O_true(:,currState))';
        
        %advance time
        currTime = currTime + 1;
        
        prevDur = dur;
        
        %save data
        states = [states, currState];
        observations = [observations, currObs-1];
    end
    
    lenObs = length(observations);
    fprintf(fid, '%d\n', lenObs);
    
    data = [4:3:3*lenObs+1; observations];
    
    format = repmat('%d\t', 1, lenObs-1);
    fprintf(fid,[format,'%d\n'], data');    
end



%generate 10 anomalous sequences
for i=1:500
    
    prevState = randsample(1:Nhid_anom, 1, true, A0_anom);
    prevDur = randsample(1:Dmax_anom, 1, true, D0_anom);

    currTime = 1;
    observations = [];
    states = [];
    
    while(currTime <= T)
        
        %select curr state
        currState = randsample(1:Nhid_anom, 1, true, A_anom(:, prevState, prevDur))';
        
        %select duration (# of timesteps) until next observation
        dur = randsample(1:Dmax_anom, 1, true, D_anom(:,currState, prevDur))';
        
        %perform dur observations in current state
        currObs = randsample(1:Nobs, 1, true, O_anom(:,currState))';
        
        %advance time
        currTime = currTime + 1;
        
        prevDur = dur;
        
        %save data
        states = [states, currState];
        observations = [observations, currObs-1];
    end
    
    lenObs = length(observations);
    fprintf(fid, '%d\n', lenObs);
    
    data = [4:3:3*lenObs+1; observations];
    
    format = repmat('%d\t', 1, lenObs-1);
    fprintf(fid,[format,'%d\n'], data');    
end


fclose(fid);

















