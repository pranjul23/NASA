--------------------------------------------------------------------------------
Profile data file './callgrind.out.78619' (creator: callgrind-3.8.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 6349231111
Trigger: Program termination
Profiled target:  ./hsmm (PID 78619, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
            Ir 
--------------------------------------------------------------------------------
37,373,921,474  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir  file:function
--------------------------------------------------------------------------------
  661,649,922  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/index.h:dai::State::State(dai::VarSet const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>) [./hsmm]
  621,677,673  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/var.h:dai::Var::operator<(dai::Var const&) const [./hsmm]
  496,968,100  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::find(dai::Var const&) const [./hsmm]
  436,030,750  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/factor.h:dai::TFactor<double, spvector<double> > dai::pointwiseOp<double, spvector<double>, std::multiplies<double> >(dai::TFactor<double, spvector<double> > const&, dai::TFactor<double, spvector<double> > const&, std::multiplies<double>, bool) [./hsmm]
  431,803,680  /usr/include/c++/4.2.1/bits/stl_function.h:std::less<dai::Var>::operator()(dai::Var const&, dai::Var const&) const [./hsmm]
  333,590,340  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::__get_mp() const [./hsmm]
  309,169,920  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<dai::Var const, unsigned long> const&) [./hsmm]
  297,916,992  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> >, std::pair<dai::Var const, unsigned long> const&) [./hsmm]
  288,165,888  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::operator[](dai::Var const&) [./hsmm]
  281,558,112  /usr/include/c++/4.2.1/bits/stl_function.h:std::_Select1st<std::pair<dai::Var const, unsigned long> >::operator()(std::pair<dai::Var const, unsigned long> const&) const [./hsmm]
  255,961,920  /usr/include/c++/4.2.1/bits/stl_function.h:std::_Select1st<std::pair<dai::Var const, unsigned long> >::_Select1st() [./hsmm]
  239,903,540  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::~__gmp_expr() [./hsmm]
  235,077,568  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_key(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > const*) [./hsmm]
  217,288,192  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_key(std::_Rb_tree_node_base const*) [./hsmm]
  214,097,234  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::__gmp_expr(unsigned long) [./hsmm]
  206,277,120  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/index.h:dai::State::operator()(dai::Var const&) const [./hsmm]
  201,670,101  /usr/include/c++/4.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >(__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > > const&, __gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > > const&) [./hsmm]
  198,534,496  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::end() const [./hsmm]
  193,313,540  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >::base() const [./hsmm]
  192,997,248  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::lower_bound(dai::Var const&) [./hsmm]
  192,107,520  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_end() [./hsmm]
  189,506,720  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >::operator++(int) [./hsmm]
  186,204,076  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_insert_unique(std::pair<dai::Var const, unsigned long> const&) [./hsmm]
  183,411,712  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> >::operator==(std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> > const&) const [./hsmm]
  178,167,104  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::get_allocator() const [./hsmm]
  173,478,496  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_create_node(std::pair<dai::Var const, unsigned long> const&) [./hsmm]
  171,458,500  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >::__normal_iterator(dai::Var const* const&) [./hsmm]
  163,666,656  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*) [./hsmm]
  157,891,230  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/util.h:dai::BigInt_size_t(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
  154,724,064  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::allocate(unsigned long, void const*) [./hsmm]
  148,526,840  /usr/include/c++/4.2.1/bits/stl_vector.h:std::vector<dai::Var, std::allocator<dai::Var> >::end() const [./hsmm]
  140,787,360  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> >::_Rb_tree_const_iterator(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > const*) [./hsmm]
  135,969,632  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_destroy_node(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*) [./hsmm]
  135,969,632  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<dai::Var const, unsigned long> >::construct(std::pair<dai::Var const, unsigned long>*, std::pair<dai::Var const, unsigned long> const&) [./hsmm]
  130,824,162  /opt/local/include/gmpxx.h:bool operator<=<__mpz_struct [1], __mpz_struct [1], __mpz_struct [1], __mpz_struct [1]>(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
  128,224,128  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_value(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > const*) [./hsmm]
  128,080,672  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> >::operator==(std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> > const&) const [./hsmm]
  127,980,960  /usr/include/c++/4.2.1/bits/stl_function.h:std::unary_function<std::pair<dai::Var const, unsigned long>, dai::Var const>::unary_function() [./hsmm]
  124,874,734  /opt/local/include/gmp.h:__gmpz_get_ui [./hsmm]
  118,520,832  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_value(std::_Rb_tree_node_base const*) [./hsmm]
  118,409,344  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/smallset.h:dai::SmallSet<dai::Var>::end() const [./hsmm]
  118,250,496  /usr/include/c++/4.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<dai::Var const*, dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >(__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > > const&, __gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > > const&) [./hsmm]
  117,721,890  /opt/local/include/gmpxx.h:bool operator==<__mpz_struct [1], __mpz_struct [1]>(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, int) [./hsmm]
  115,894,400  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<std::pair<dai::Var const, unsigned long> >::~allocator() [./hsmm]
  113,959,040  /opt/local/include/gmpxx.h:__gmp_expr<__gmp_resolve_expr<__mpz_struct [1], __mpz_struct [1]>::value_type, __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> > operator%<__mpz_struct [1], __mpz_struct [1], __mpz_struct [1], __mpz_struct [1]>(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
  109,576,000  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>& __gmp_expr<__mpz_struct [1], __mpz_struct [1]>::operator/=<__mpz_struct [1], __mpz_struct [1]>(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
  106,143,004  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >::operator*() const [./hsmm]
  103,757,094  /opt/local/include/gmpxx.h:__gmp_binary_less_equal::eval(__mpz_struct const*, __mpz_struct const*) [./hsmm]
  103,149,376  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<std::pair<dai::Var const, unsigned long> >::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >(std::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > > const&) [./hsmm]
  103,086,912  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*)'2 [./hsmm]
  101,862,640  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >::operator->() const [./hsmm]
  101,862,640  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/var.h:dai::Var::states() const [./hsmm]
  100,809,920  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_divides> >::eval(__mpz_struct*, unsigned long) const [./hsmm]
  100,809,920  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> >::eval(__mpz_struct*, unsigned long) const [./hsmm]
  100,281,610  /opt/local/include/gmpxx.h:__gmp_binary_equal::eval(__mpz_struct const*, long) [./hsmm]
  100,129,216  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_begin() [./hsmm]
   96,316,928  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::find(dai::Var const&) const [./hsmm]
   94,554,432  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::insert(std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> >, std::pair<dai::Var const, unsigned long> const&) [./hsmm]
   94,394,880  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_get_Node_allocator() const [./hsmm]
   90,338,844  /usr/include/c++/4.2.1/bits/stl_vector.h:std::vector<dai::Var, std::allocator<dai::Var> >::end() [./hsmm]
   87,702,784  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::end() [./hsmm]
   86,077,952  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::end() const [./hsmm]
   85,549,248  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::lower_bound(dai::Var const&) [./hsmm]
   79,995,800  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >::base() const [./hsmm]
   79,930,268  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_right(std::_Rb_tree_node_base*) [./hsmm]
   79,706,336  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_get_node() [./hsmm]
   79,607,360  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_Rb_tree_impl<std::less<dai::Var>, false>::_Rb_tree_impl(std::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > > const&, std::less<dai::Var> const&) [./hsmm]
   78,931,104  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*) [./hsmm]
   76,544,064  /usr/include/c++/4.2.1/bits/stl_pair.h:std::pair<dai::Var const, unsigned long>::pair(dai::Var const&, unsigned long const&) [./hsmm]
   75,373,540  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_left(std::_Rb_tree_node_base const*) [./hsmm]
   74,287,560  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >::__normal_iterator(dai::Var* const&) [./hsmm]
   72,774,416  /usr/include/c++/4.2.1/new:operator new(unsigned long, void*) [./hsmm]
   72,041,472  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::end() [./hsmm]
   71,869,302  /usr/include/c++/4.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > const&, __gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > const&) [./hsmm]
   70,798,464  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/index.h:dai::State::operator()(dai::VarSet const&) const [./hsmm]
   70,128,640  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> >(__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> > const&) [./hsmm]
   70,074,368  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/smallset.h:dai::SmallSet<dai::Var>::end() [./hsmm]
   68,319,264  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> >::operator->() const [./hsmm]
   66,588,928  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_rightmost() [./hsmm]
   65,745,600  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_divides> >::__gmp_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   65,745,600  /opt/local/include/gmpxx.h:__gmp_binary_divides::eval(__mpz_struct*, __mpz_struct const*, __mpz_struct const*) [./hsmm]
   65,745,600  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> >::__gmp_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   65,745,600  /opt/local/include/gmpxx.h:__gmp_binary_modulus::eval(__mpz_struct*, __mpz_struct const*, __mpz_struct const*) [./hsmm]
   65,640,512  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_put_node(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*) [./hsmm]
   63,156,492  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::get_ui() const [./hsmm]
   61,362,560  /opt/local/include/gmpxx.h:void __gmp_set_expr<__gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> >(__mpz_struct*, __gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus> > const&) [./hsmm]
   61,362,560  /opt/local/include/gmpxx.h:void __gmp_set_expr<__gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_divides> >(__mpz_struct*, __gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_divides> > const&) [./hsmm]
   60,831,744  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_end() const [./hsmm]
   59,696,728  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::operator++(int) [./hsmm]
   58,533,696  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> >::operator*() const [./hsmm]
   57,947,200  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<dai::Var const, unsigned long> >::new_allocator() [./hsmm]
   57,947,200  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<dai::Var const, unsigned long> >::~new_allocator() [./hsmm]
   56,979,520  /opt/local/include/gmpxx.h:__gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_divides>::__gmp_binary_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   56,979,520  /opt/local/include/gmpxx.h:__gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_modulus>::__gmp_binary_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   56,447,424  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_begin() const [./hsmm]
   56,263,296  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::deallocate(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*, unsigned long) [./hsmm]
   56,263,296  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::max_size() const [./hsmm]
   55,607,380  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::base() const [./hsmm]
   53,093,376  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::map() [./hsmm]
   52,259,108  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_left(std::_Rb_tree_node_base*) [./hsmm]
   52,015,540  /usr/include/c++/4.2.1/bits/stl_vector.h:std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > >::end() const [./hsmm]
   51,574,688  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<dai::Var const, unsigned long> >::destroy(std::pair<dai::Var const, unsigned long>*) [./hsmm]
   50,890,020  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::__normal_iterator(std::pair<unsigned long, double> const* const&) [./hsmm]
   50,881,152  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_Rb_tree(std::less<dai::Var> const&, std::allocator<std::pair<dai::Var const, unsigned long> > const&) [./hsmm]
   50,775,296  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::size() const [./hsmm]
   48,615,760  /usr/include/c++/4.2.1/bits/stl_vector.h:std::vector<dai::Var, std::allocator<dai::Var> >::begin() const [./hsmm]
   47,764,416  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::~_Rb_tree() [./hsmm]
   45,111,780  /usr/include/c++/4.2.1/limits:std::numeric_limits<unsigned long>::max() [./hsmm]
   44,867,200  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::~allocator() [./hsmm]
   43,215,424  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/index.h:dai::State::~State() [./hsmm]
   42,096,828  /usr/include/c++/4.2.1/bits/stl_vector.h:std::vector<dai::Var, std::allocator<dai::Var> >::begin() [./hsmm]
   40,292,928  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::begin() [./hsmm]
   39,534,656  /usr/include/c++/4.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> >, bool>::pair(std::_Rb_tree_iterator<std::pair<dai::Var const, unsigned long> > const&, bool const&) [./hsmm]
   38,461,312  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/smallset.h:dai::SmallSet<dai::Var>::begin() const [./hsmm]
   37,828,656  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/spvector.h:spvector<double>::end() const [./hsmm]
   37,828,656  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/prob.h:dai::TProb<double, spvector<double> >::end() const [./hsmm]
   33,402,880  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/smallset.h:dai::SmallSet<dai::Var>::begin() [./hsmm]
   32,458,144  /usr/include/c++/4.2.1/bits/vector.tcc:std::vector<dai::Var, std::allocator<dai::Var> >::_M_insert_aux(__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >, dai::Var const&) [./hsmm]
   29,826,830  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::operator->() const [./hsmm]
   29,568,448  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::__gmp_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   29,568,448  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::allocator(std::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > > const&) [./hsmm]
   29,227,520  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var const*, std::vector<dai::Var, std::allocator<dai::Var> > >::__normal_iterator<dai::Var*>(__gnu_cxx::__normal_iterator<dai::Var*, __gnu_cxx::__enable_if<std::__are_same<dai::Var*, dai::Var*>::__value, std::vector<dai::Var, std::allocator<dai::Var> > >::__type> const&) [./hsmm]
   28,946,616  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/factor.h:dai::TFactor<double, spvector<double> >::p() const [./hsmm]
   24,460,614  /usr/include/c++/4.2.1/bits/stl_algo.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > std::lower_bound<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, std::pair<unsigned long, double>, first_less<unsigned long, double> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, __gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, std::pair<unsigned long, double> const&, first_less<unsigned long, double>) [./hsmm]
   24,334,464  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::allocator<std::pair<dai::Var const, unsigned long> >(std::allocator<std::pair<dai::Var const, unsigned long> > const&) [./hsmm]
   23,443,040  /usr/include/c++/4.2.1/bits/stl_pair.h:std::pair<dai::Var const, unsigned long>::~pair() [./hsmm]
   22,744,960  /usr/include/c++/4.2.1/bits/stl_map.h:std::map<dai::Var, unsigned long, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::~map() [./hsmm]
   22,744,960  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_Rb_tree_impl<std::less<dai::Var>, false>::~_Rb_tree_impl() [./hsmm]
   22,529,328  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >::eval(__mpz_struct*, unsigned long) const [./hsmm]
   22,433,600  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::~new_allocator() [./hsmm]
   22,122,240  /usr/include/c++/4.2.1/bits/stl_function.h:std::less<dai::Var>::less() [./hsmm]
   22,122,240  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<std::pair<dai::Var const, unsigned long> >::allocator() [./hsmm]
   21,607,340  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/factor.h:dai::TFactor<double, spvector<double> >::vars() const [./hsmm]
   19,112,260  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/spvector.h:first_less<unsigned long, double>::operator()(std::pair<unsigned long, double> const&, std::pair<unsigned long, double> const&) [./hsmm]
   17,276,320  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> >::operator!=(std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> > const&) const [./hsmm]
   16,765,814  /usr/include/c++/4.2.1/bits/stl_algo.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > std::lower_bound<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, std::pair<unsigned long, double>, first_less<unsigned long, double> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, __gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, std::pair<unsigned long, double> const&, first_less<unsigned long, double>) [./hsmm]
   15,856,412  /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_S_right(std::_Rb_tree_node_base const*) [./hsmm]
   15,532,032  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >, __gmp_binary_plus> >::eval(__mpz_struct*) const [./hsmm]
   15,192,290  /usr/include/c++/4.2.1/bits/stl_iterator_base_types.h:std::forward_iterator_tag::forward_iterator_tag() [./hsmm]
   15,192,290  /usr/include/c++/4.2.1/bits/stl_iterator_base_types.h:std::bidirectional_iterator_tag::bidirectional_iterator_tag() [./hsmm]
   15,192,290  /usr/include/c++/4.2.1/bits/stl_iterator_base_types.h:std::random_access_iterator_tag::random_access_iterator_tag() [./hsmm]
   14,693,040  /opt/local/include/gmpxx.h:__gmp_binary_multiplies::eval(__mpz_struct*, __mpz_struct const*, __mpz_struct const*) [./hsmm]
   14,693,040  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >::__gmp_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   13,713,504  /opt/local/include/gmpxx.h:void __gmp_set_expr<__gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >(__mpz_struct*, __gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> > const&) [./hsmm]
   13,646,976  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::new_allocator(__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > > const&) [./hsmm]
   12,915,558  /usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h:void std::advance<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, long>(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >&, long) [./hsmm]
   12,733,968  /opt/local/include/gmpxx.h:__gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies>::__gmp_binary_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   12,619,776  /opt/local/include/gmpxx.h:__gmp_expr<__gmp_resolve_expr<__mpz_struct [1], __mpz_struct [1]>::value_type, __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> > operator*<__mpz_struct [1], __mpz_struct [1], __mpz_struct [1], __mpz_struct [1]>(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   12,354,000  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>& __gmp_expr<__mpz_struct [1], __mpz_struct [1]>::operator*=<__mpz_struct [1], __mpz_struct [1]>(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&) [./hsmm]
   12,134,400  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>& __gmp_expr<__mpz_struct [1], __mpz_struct [1]>::operator+=<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >(__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> > const&) [./hsmm]
   12,131,706  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/spvector.h:spvector<double>::set(unsigned long, double) [./hsmm]
   12,091,040  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/smallset.h:dai::SmallSet<dai::Var>::operator|=(dai::Var const&) [./hsmm]
   11,863,552  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/index.h:void dai::State::insert<std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> > >(std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> >, std::_Rb_tree_const_iterator<std::pair<dai::Var const, unsigned long> >) [./hsmm]
   11,804,702  /usr/include/c++/4.2.1/bits/stl_uninitialized.h:dai::Var* std::__uninitialized_copy_aux<dai::Var*, dai::Var*>(dai::Var*, dai::Var*, dai::Var*, std::__false_type) [./hsmm]
   11,230,920  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::operator+=(long const&) [./hsmm]
   11,103,600  /usr/include/c++/4.2.1/bits/vector.tcc:std::vector<dai::Var, std::allocator<dai::Var> >::insert(__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >, dai::Var const&) [./hsmm]
   11,061,120  /usr/include/c++/4.2.1/bits/stl_function.h:std::binary_function<dai::Var, dai::Var, bool>::binary_function() [./hsmm]
   11,061,120  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > >::new_allocator() [./hsmm]
   10,623,480  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::base() const [./hsmm]
   10,282,032  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >::difference_type __gnu_cxx::operator-<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >(__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > > const&, __gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > > const&) [./hsmm]
    9,862,606  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<dai::Var>::allocator(std::allocator<dai::Var> const&) [./hsmm]
    9,660,300  /usr/include/c++/4.2.1/bits/stl_construct.h:void std::_Construct<std::pair<unsigned long, double>, std::pair<unsigned long, double> >(std::pair<unsigned long, double>*, std::pair<unsigned long, double> const&) [./hsmm]
    9,600,960  /usr/include/c++/4.2.1/bits/stl_algo.h:__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > > std::lower_bound<__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >, dai::Var>(__gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >, __gnu_cxx::__normal_iterator<dai::Var*, std::vector<dai::Var, std::allocator<dai::Var> > >, dai::Var const&) [./hsmm]
    9,196,032  /usr/include/c++/4.2.1/bits/stl_pair.h:std::pair<unsigned long, double> std::make_pair<unsigned long, double>(unsigned long, double) [./hsmm]
    9,063,541  /usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h:void std::advance<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, long>(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >&, long) [./hsmm]
    8,960,800  /usr/include/c++/4.2.1/bits/stl_uninitialized.h:dai::Var* std::uninitialized_copy<dai::Var*, dai::Var*>(dai::Var*, dai::Var*, dai::Var*) [./hsmm]
    8,701,258  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/spvector.h:spvector<double>::get(unsigned long) const [./hsmm]
    8,269,240  /usr/include/c++/4.2.1/bits/allocator.h:std::allocator<dai::Var>::~allocator() [./hsmm]
    8,069,728  /usr/include/c++/4.2.1/bits/stl_construct.h:void std::__destroy_aux<dai::Var*>(dai::Var*, dai::Var*, std::__false_type) [./hsmm]
    7,907,120  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::__normal_iterator(std::pair<unsigned long, double>* const&) [./hsmm]
    7,881,340  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::operator+=(long const&) [./hsmm]
    7,811,356  /usr/include/c++/4.2.1/bits/stl_vector.h:std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > >::end() [./hsmm]
    7,792,000  /usr/include/c++/4.2.1/bits/stl_uninitialized.h:dai::Var* std::__uninitialized_copy_a<dai::Var*, dai::Var*, dai::Var>(dai::Var*, dai::Var*, dai::Var*, std::allocator<dai::Var>) [./hsmm]
    7,766,016  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __mpz_struct [1]>::__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >(__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> > const&) [./hsmm]
    7,617,264  /usr/include/c++/4.2.1/bits/vector.tcc:std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > >::insert(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, std::pair<unsigned long, double> const&) [./hsmm]
    7,596,145  /usr/include/c++/4.2.1/bits/stl_iterator_base_types.h:std::input_iterator_tag::input_iterator_tag() [./hsmm]
    7,500,016  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::operator++() [./hsmm]
    7,300,098  /usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h:void std::__advance<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >, long>(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >&, long, std::random_access_iterator_tag) [./hsmm]
    7,280,640  /opt/local/include/gmpxx.h:__gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> >, __gmp_binary_plus> >::__gmp_expr(__gmp_expr<__mpz_struct [1], __mpz_struct [1]> const&, __gmp_expr<__mpz_struct [1], __gmp_binary_expr<__gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_expr<__mpz_struct [1], __mpz_struct [1]>, __gmp_binary_multiplies> > const&) [./hsmm]
    7,280,640  /opt/local/include/gmpxx.h:__gmp_binary_plus::eval(__mpz_struct*, __mpz_struct const*, __mpz_struct const*) [./hsmm]
    7,152,966  /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/factor.h:dai::TFactor<double, spvector<double> >::marginal(dai::VarSet const&, bool) const [./hsmm]
    7,028,500  /usr/include/c++/4.2.1/bits/stl_iterator_base_types.h:std::iterator_traits<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > >::iterator_category std::__iterator_category<__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, double>*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > > const&) [./hsmm]
    6,823,740  /usr/include/c++/4.2.1/ext/new_allocator.h:__gnu_cxx::new_allocator<dai::Var>::allocate(unsigned long, void const*) [./hsmm]
    6,822,160  /usr/include/c++/4.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<unsigned long, double> const*, std::vector<std::pair<unsigned long, double>, std::allocator<std::pair<unsigned long, double> > > >::operator++() [./hsmm]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/new
--------------------------------------------------------------------------------
        Ir 

-- line 97 ----------------------------------------
         .  void operator delete(void*) throw();
         .  void operator delete[](void*) throw();
         .  void* operator new(std::size_t, const std::nothrow_t&) throw();
         .  void* operator new[](std::size_t, const std::nothrow_t&) throw();
         .  void operator delete(void*, const std::nothrow_t&) throw();
         .  void operator delete[](void*, const std::nothrow_t&) throw();
         .  
         .  // Default placement versions of operator new.
72,774,416  inline void* operator new(std::size_t, void* __p) throw() { return __p; }
         .  inline void* operator new[](std::size_t, void* __p) throw() { return __p; }
         .  
         .  // Default placement versions of operator delete.
         .  inline void  operator delete  (void*, void*) throw() { }
         .  inline void  operator delete[](void*, void*) throw() { }
         .  //@}
         .  } // extern "C++"
         .  
-- line 113 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h
--------------------------------------------------------------------------------
        Ir 

-- line 85 ----------------------------------------
         .  	  ++__n;
         .  	}
         .        return __n;
         .      }
         .  
         .    template<typename _RandomAccessIterator>
         .      inline typename iterator_traits<_RandomAccessIterator>::difference_type
         .      __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 3,958,848                 random_access_iterator_tag)
         .      {
         .        // concept requirements
         .        __glibcxx_function_requires(_RandomAccessIteratorConcept<
         .  				  _RandomAccessIterator>)
 3,079,104        return __last - __first;
         .      }
         .  
         .    /**
         .     *  @brief A generalization of pointer arithmetic.
         .     *  @param  first  An input iterator.
         .     *  @param  last  An input iterator.
         .     *  @return  The distance between them.
         .     *
-- line 106 ----------------------------------------
-- line 107 ----------------------------------------
         .     *  Returns @c n such that first + n == last.  This requires that @p last
         .     *  must be reachable from @p first.  Note that @c n may be negative.
         .     *
         .     *  For random access iterators, this uses their @c + and @c - operations
         .     *  and are constant time.  For other %iterator classes they are linear time.
         .    */
         .    template<typename _InputIterator>
         .      inline typename iterator_traits<_InputIterator>::difference_type
 3,079,104      distance(_InputIterator __first, _InputIterator __last)
         .      {
         .        // concept requirements -- taken care of in __distance
         .        return std::__distance(__first, __last,
 7,917,696  			     std::__iterator_category(__first));
         .      }
         .  
         .    template<typename _InputIterator, typename _Distance>
         .      inline void
         .      __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
         .      {
         .        // concept requirements
         .        __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
-- line 127 ----------------------------------------
-- line 143 ----------------------------------------
         .        else
         .          while (__n++)
         .  	  --__i;
         .      }
         .  
         .    template<typename _RandomAccessIterator, typename _Distance>
         .      inline void
         .      __advance(_RandomAccessIterator& __i, _Distance __n,
 5,396,785                random_access_iterator_tag)
         .      {
         .        // concept requirements
         .        __glibcxx_function_requires(_RandomAccessIteratorConcept<
         .  				  _RandomAccessIterator>)
 8,634,856        __i += __n;
         .      }
         .  
         .    /**
         .     *  @brief A generalization of pointer arithmetic.
         .     *  @param  i  An input iterator.
         .     *  @param  n  The "delta" by which to change @p i.
         .     *  @return  Nothing.
         .     *
-- line 164 ----------------------------------------
-- line 165 ----------------------------------------
         .     *  This increments @p i by @p n.  For bidirectional and random access
         .     *  iterators, @p n may be negative, in which case @p i is decremented.
         .     *
         .     *  For random access iterators, this uses their @c + and @c - operations
         .     *  and are constant time.  For other %iterator classes they are linear time.
         .    */
         .    template<typename _InputIterator, typename _Distance>
         .      inline void
 5,396,785      advance(_InputIterator& __i, _Distance __n)
         .      {
         .        // concept requirements -- taken care of in __advance
 2,158,714        typename iterator_traits<_InputIterator>::difference_type __d = __n;
17,269,712        std::__advance(__i, __d, std::__iterator_category(__i));
         .      }
         .  
         .  _GLIBCXX_END_NAMESPACE
         .  
         .  #endif /* _ITERATOR_BASE_FUNCS_H */

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
       Ir 

-- line 73 ----------------------------------------
        .  			     _ForwardIterator __result,
        .  			     __true_type)
        .      { return std::copy(__first, __last, __result); }
        .  
        .    template<typename _InputIterator, typename _ForwardIterator>
        .      inline _ForwardIterator
        .      __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
        .  			     _ForwardIterator __result,
2,700,510  			     __false_type)
        .      {
  900,170        _ForwardIterator __cur = __result;
        .        try
        .  	{
9,644,362  	  for (; __first != __last; ++__first, ++__cur)
3,739,152  	    std::_Construct(&*__cur, *__first);
4,464,910  	  return __cur;
        .  	}
   47,920        catch(...)
        .  	{
        .  	  std::_Destroy(__result, __cur);
        .  	  __throw_exception_again;
        .  	}
        .      }
        .  
        .    /**
        .     *  @brief Copies the range [first,last) into result.
-- line 98 ----------------------------------------
-- line 101 ----------------------------------------
        .     *  @param  result An output iterator.
        .     *  @return   result + (first - last)
        .     *
        .     *  Like copy(), but does not require an initialized output range.
        .    */
        .    template<typename _InputIterator, typename _ForwardIterator>
        .      inline _ForwardIterator
        .      uninitialized_copy(_InputIterator __first, _InputIterator __last,
2,700,510  		       _ForwardIterator __result)
        .      {
        .        typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
        .        typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
        .        return std::__uninitialized_copy_aux(__first, __last, __result,
7,651,445  					   _Is_POD());
        .      }
        .  
        .    inline char*
        .    uninitialized_copy(const char* __first, const char* __last, char* __result)
        .    {
        .      std::memmove(__result, __first, __last - __first);
        .      return __result + (__last - __first);
        .    }
-- line 122 ----------------------------------------
-- line 245 ----------------------------------------
        .  	  __throw_exception_again;
        .  	}
        .      }
        .  
        .    template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
        .      inline _ForwardIterator
        .      __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        .  			   _ForwardIterator __result,
3,150,595  			   allocator<_Tp>)
5,851,105      { return std::uninitialized_copy(__first, __last, __result); }
        .  
        .    template<typename _ForwardIterator, typename _Tp, typename _Allocator>
        .      void
        .      __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
        .  			   const _Tp& __x, _Allocator __alloc)
        .      {
        .        _ForwardIterator __cur = __first;
        .        try
-- line 262 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_vector.h
--------------------------------------------------------------------------------
         Ir 

-- line 75 ----------------------------------------
          .    */
          .    template<typename _Tp, typename _Alloc>
          .      struct _Vector_base
          .      {
          .        typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;
          .  
          .        struct _Vector_impl 
          .        : public _Tp_alloc_type
    910,240        {
          .  	_Tp*           _M_start;
          .  	_Tp*           _M_finish;
          .  	_Tp*           _M_end_of_storage;
    455,120  	_Vector_impl(_Tp_alloc_type const& __a)
  1,001,264  	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    273,072  	{ }
          .        };
          .        
          .      public:
          .        typedef _Alloc allocator_type;
          .  
          .        _Tp_alloc_type&
  2,313,735        _M_get_Tp_allocator()
  5,398,715        { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
          .  
          .        const _Tp_alloc_type&
    688,605        _M_get_Tp_allocator() const
  1,606,745        { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
          .  
          .        allocator_type
          .        get_allocator() const
          .        { return allocator_type(_M_get_Tp_allocator()); }
          .  
    389,230        _Vector_base(const allocator_type& __a)
    389,230        : _M_impl(__a)
    233,538        { }
          .  
     79,068        _Vector_base(size_t __n, const allocator_type& __a)
     65,890        : _M_impl(__a)
          .        {
     39,534  	  if (__n)
          .  	  {
    131,780  	    this->_M_impl._M_start = this->_M_allocate(__n);
     52,712  	    this->_M_impl._M_finish = this->_M_impl._M_start;
    158,136  	    this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
          .  	  }
          .        }
          .  
    364,096        ~_Vector_base()
  2,366,624        { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
          .  		      - this->_M_impl._M_start); }
          .  
          .      public:
          .        _Vector_impl _M_impl;
          .  
          .        _Tp*
  1,168,640        _M_allocate(size_t __n)
  3,038,464        { return _M_impl.allocate(__n); }
          .  
          .        void
  1,869,444        _M_deallocate(_Tp* __p, size_t __n)
          .        {
    934,722  	if (__p)
  2,333,496  	  _M_impl.deallocate(__p, __n);
          .        }
          .      };
          .  
          .  
          .    /**
          .     *  @brief A standard container which offers fixed time access to
          .     *  individual elements in any order.
          .     *
-- line 145 ----------------------------------------
-- line 193 ----------------------------------------
          .  
          .      public:
          .        // [23.2.4.1] construct/copy/destroy
          .        // (assign() and get_allocator() are also listed in this section)
          .        /**
          .         *  @brief  Default constructor creates no elements.
          .         */
          .        explicit
    389,230        vector(const allocator_type& __a = allocator_type())
    389,230        : _Base(__a)
    233,538        { }
          .  
          .        /**
          .         *  @brief  Create a %vector with copies of an exemplar element.
          .         *  @param  n  The number of elements to initially create.
          .         *  @param  value  An element to copy.
          .         *
          .         *  This constructor fills the %vector with @a n copies of @a value.
          .         */
-- line 211 ----------------------------------------
-- line 223 ----------------------------------------
          .         *  @brief  %Vector copy constructor.
          .         *  @param  x  A %vector of identical element and allocator types.
          .         *
          .         *  The newly-created %vector uses a copy of the allocation
          .         *  object used by @a x.  All the elements of @a x are copied,
          .         *  but any extra memory in
          .         *  @a x (for fast expansion) will not be copied.
          .         */
     65,890        vector(const vector& __x)
    158,136        : _Base(__x.size(), __x._M_get_Tp_allocator())
    645,722        { this->_M_impl._M_finish =
          .  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
          .  				      this->_M_impl._M_start,
          .  				      _M_get_Tp_allocator());
          .        }
          .  
          .        /**
          .         *  @brief  Builds a %vector from a range.
          .         *  @param  first  An input iterator.
-- line 241 ----------------------------------------
-- line 262 ----------------------------------------
          .  	}
          .  
          .        /**
          .         *  The dtor only erases the elements, and note that if the
          .         *  elements themselves are pointers, the pointed-to memory is
          .         *  not touched in any way.  Managing the pointer is the user's
          .         *  responsibilty.
          .         */
    364,096        ~vector()
  2,548,672        { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
          .  		      _M_get_Tp_allocator()); }
          .  
          .        /**
          .         *  @brief  %Vector assignment operator.
          .         *  @param  x  A %vector of identical element and allocator types.
          .         *
          .         *  All the elements of @a x are copied, but any extra memory in
          .         *  @a x (for fast expansion) will not be copied.  Unlike the
-- line 279 ----------------------------------------
-- line 322 ----------------------------------------
          .  
          .        // iterators
          .        /**
          .         *  Returns a read/write iterator that points to the first
          .         *  element in the %vector.  Iteration is done in ordinary
          .         *  element order.
          .         */
          .        iterator
 10,882,276        begin()
 35,367,397        { return iterator(this->_M_impl._M_start); }
          .  
          .        /**
          .         *  Returns a read-only (constant) iterator that points to the
          .         *  first element in the %vector.  Iteration is done in ordinary
          .         *  element order.
          .         */
          .        const_iterator
 10,491,944        begin() const
 41,967,776        { return const_iterator(this->_M_impl._M_start); }
          .  
          .        /**
          .         *  Returns a read/write iterator that points one past the last
          .         *  element in the %vector.  Iteration is done in ordinary
          .         *  element order.
          .         */
          .        iterator
 20,663,200        end()
 77,487,000        { return iterator(this->_M_impl._M_finish); }
          .  
          .        /**
          .         *  Returns a read-only (constant) iterator that points one past
          .         *  the last element in the %vector.  Iteration is done in
          .         *  ordinary element order.
          .         */
          .        const_iterator
 40,108,480        end() const
160,433,920        { return const_iterator(this->_M_impl._M_finish); }
          .  
          .        /**
          .         *  Returns a read/write reverse iterator that points to the
          .         *  last element in the %vector.  Iteration is done in reverse
          .         *  element order.
          .         */
          .        reverse_iterator
          .        rbegin()
-- line 366 ----------------------------------------
-- line 391 ----------------------------------------
          .         */
          .        const_reverse_iterator
          .        rend() const
          .        { return const_reverse_iterator(begin()); }
          .  
          .        // [23.2.4.2] capacity
          .        /**  Returns the number of elements in the %vector.  */
          .        size_type
    794,661        size() const
  3,978,109        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
          .  
          .        /**  Returns the size() of the largest possible %vector.  */
          .        size_type
    865,428        max_size() const
  2,596,284        { return _M_get_Tp_allocator().max_size(); }
          .  
          .        /**
          .         *  @brief  Resizes the %vector to the specified number of elements.
          .         *  @param  new_size  Number of elements the %vector should contain.
          .         *  @param  x  Data with which new elements should be populated.
          .         *
          .         *  This function will %resize the %vector to the specified
          .         *  number of elements.  If the number is smaller than the
-- line 413 ----------------------------------------
-- line 424 ----------------------------------------
          .  	  insert(end(), __new_size - size(), __x);
          .        }
          .  
          .        /**
          .         *  Returns the total number of elements that the %vector can
          .         *  hold before needing to allocate more memory.
          .         */
          .        size_type
     39,540        capacity() const
          .        { return size_type(this->_M_impl._M_end_of_storage
    197,700  			 - this->_M_impl._M_start); }
          .  
          .        /**
          .         *  Returns true if the %vector is empty.  (Thus begin() would
          .         *  equal end().)
          .         */
          .        bool
          4        empty() const
         28        { return begin() == end(); }
          .  
          .        /**
          .         *  @brief  Attempt to preallocate enough memory for specified number of
          .         *          elements.
          .         *  @param  n  Number of elements required.
          .         *  @throw  std::length_error  If @a n exceeds @c max_size().
          .         *
          .         *  This function attempts to reserve enough memory for the
-- line 450 ----------------------------------------
-- line 469 ----------------------------------------
          .         *  @return  Read/write reference to data.
          .         *
          .         *  This operator allows for easy, array-style, data access.
          .         *  Note that data access with this operator is unchecked and
          .         *  out_of_range lookups are not defined. (For checked lookups
          .         *  see at().)
          .         */
          .        reference
     40,748        operator[](size_type __n)
    122,244        { return *(this->_M_impl._M_start + __n); }
          .  
          .        /**
          .         *  @brief  Subscript access to the data contained in the %vector.
          .         *  @param n The index of the element for which data should be
          .         *  accessed.
          .         *  @return  Read-only (constant) reference to data.
          .         *
          .         *  This operator allows for easy, array-style, data access.
-- line 486 ----------------------------------------
-- line 592 ----------------------------------------
          .         *
          .         *  This is a typical stack operation.  The function creates an
          .         *  element at the end of the %vector and assigns the given data
          .         *  to it.  Due to the nature of a %vector this operation can be
          .         *  done in constant time if the %vector has preallocated space
          .         *  available.
          .         */
          .        void
    167,600        push_back(const value_type& __x)
          .        {
    201,120  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
          .  	  {
    187,138  	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
    187,138  	    ++this->_M_impl._M_finish;
          .  	  }
          .  	else
    181,992  	  _M_insert_aux(end(), __x);
          .        }
          .  
          .        /**
          .         *  @brief  Removes last element.
          .         *
          .         *  This is a typical stack operation. It shrinks the %vector by one.
          .         *
          .         *  Note that no data is returned, and if the last element's
-- line 616 ----------------------------------------
-- line 743 ----------------------------------------
          .  
          .        /**
          .         *  Erases all the elements.  Note that this function only erases the
          .         *  elements, and that if the elements themselves are pointers, the
          .         *  pointed-to memory is not touched in any way.  Managing the pointer is
          .         *  the user's responsibilty.
          .         */
          .        void
      2,396        clear()
      5,391        { _M_erase_at_end(this->_M_impl._M_start); }
          .  
          .      protected:
          .        /**
          .         *  @if maint
          .         *  Memory expansion handler.  Uses the member allocation function to
          .         *  obtain @a n bytes of memory, and then copies [first,last) into it.
          .         *  @endif
          .         */
          .        template<typename _ForwardIterator>
          .          pointer
          .          _M_allocate_and_copy(size_type __n,
     29,351  			     _ForwardIterator __first, _ForwardIterator __last)
          .          {
     25,158  	  pointer __result = this->_M_allocate(__n);
          .  	  try
          .  	    {
     83,860  	      std::__uninitialized_copy_a(__first, __last, __result,
          .  					  _M_get_Tp_allocator());
     29,351  	      return __result;
          .  	    }
     16,772  	  catch(...)
          .  	    {
          .  	      _M_deallocate(__result, __n);
          .  	      __throw_exception_again;
          .  	    }
          .  	}
          .  
          .  
          .        // Internal constructor functions follow.
-- line 781 ----------------------------------------
-- line 914 ----------------------------------------
          .        void
          .        _M_insert_aux(iterator __position, const value_type& __x);
          .  
          .        // Internal erase functions follow.
          .  
          .        // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
          .        // _M_assign_aux.
          .        void
      2,995        _M_erase_at_end(pointer __pos)
          .        {
     12,579  	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
      2,396  	this->_M_impl._M_finish = __pos;
          .        }
          .      };
          .  
          .  
          .    /**
          .     *  @brief  Vector equality comparison.
          .     *  @param  x  A %vector.
          .     *  @param  y  A %vector of the same type as @a x.
-- line 933 ----------------------------------------
-- line 934 ----------------------------------------
          .     *  @return  True iff the size and elements of the vectors are equal.
          .     *
          .     *  This is an equivalence relation.  It is linear in the size of the
          .     *  vectors.  Vectors are considered equivalent if their sizes are equal,
          .     *  and if corresponding elements compare equal.
          .    */
          .    template<typename _Tp, typename _Alloc>
          .      inline bool
     17,970      operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
          .      { return (__x.size() == __y.size()
    113,810  	      && std::equal(__x.begin(), __x.end(), __y.begin())); }
          .  
          .    /**
          .     *  @brief  Vector ordering relation.
          .     *  @param  x  A %vector.
          .     *  @param  y  A %vector of the same type as @a x.
          .     *  @return  True iff @a x is lexicographically less than @a y.
          .     *
          .     *  This is a total ordering relation.  It is linear in the size of the
-- line 952 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/prob.h
--------------------------------------------------------------------------------
        Ir 

-- line 15 ----------------------------------------
         .  #include <dai/spvector.h>
         .  
         .  
         .  namespace dai {
         .  
         .  
         .  
         .  template <typename T, typename spvector_type>
   312,696  class TProb {
         .  public:
         .  	typedef spvector_type container_type;
         .  	typedef TProb<T,spvector_type> this_type;
         .  
         .  private:
         .  	container_type _p;
         .  
         .  public:
         .  
         .  
    47,920  	TProb() : _p() {}
         .  
    33,544  	explicit TProb( size_t n ) : _p( n, (T)1 / n ) {}
         .  
    53,910  	explicit TProb( size_t n, T p ) : _p( n, p ) {}
         .  
         .  
         .  	template <typename TIterator>
         .  	TProb( TIterator begin, TIterator end, size_t sizeHint, T def=0) : _p( begin, end, sizeHint, def ) {}
         .  
         .  
         .  	template <typename S>
         .  	TProb( const std::vector<S> &v, T def=0) : _p( v, v.size(), def ) {}
-- line 46 ----------------------------------------
-- line 47 ----------------------------------------
         .  
         .  	typedef typename container_type::const_iterator const_iterator;
         .  	typedef typename container_type::iterator iterator;
         .  	typedef typename container_type::const_reverse_iterator const_reverse_iterator;
         .  	typedef typename container_type::reverse_iterator reverse_iterator;
         .  
         .  
         .  
    19,168  	iterator begin() { return _p.begin(); }
 1,092,208  	const_iterator begin() const { return _p.begin(); }
         .  
   555,488  	iterator end() { return _p.end(); }
37,828,656  	const_iterator end() const { return _p.end(); }
         .  
         .  	reverse_iterator rbegin() { return _p.rbegin(); }
         .  	const_reverse_iterator rbegin() const { return _p.rbegin(); }
         .  
         .  	reverse_iterator rend() { return _p.rend(); }
         .  	const_reverse_iterator rend() const { return _p.rend(); }
         .  
         .  
         .  	void resize( size_t sz ) {
         .  		_p.resize( sz );
         .  	}
         .  
         .  
         .  
 1,913,384  	T get( size_t i ) const { return _p[i]; }
         .  
 2,119,560  	void set( size_t i, T val ) { _p.set( i, val ); }
         .  
         .  
         .  
         .  	const container_type& p() const { return _p; }
         .  
         .  	container_type& p() { return _p; }
         .  
 1,628,464  	T operator[]( size_t i ) const { return get(i); }
         .  
    50,316  	size_t size() const { return _p.size(); }
         .  
    16,786  	size_t nrDef() const { return _p.nrDef(); }
         .  
         .  	size_t nrNonDef() const { return _p.nrNonDef(); }
         .  
 2,212,742  	T def() const { return _p.def(); }
         .  
    35,940  	void setDef( T def ) { _p.setDef( def ); }
         .  
         .  
    10,791  	template<typename unOp> T accumulateSum( T init, unOp op ) const {
    10,791  		T t = op(init);
   790,236  		for( const_iterator it = begin(); it != end(); it++ )
   402,288  			t += op(it->second);
    34,771  		t += nrDef() * op(def());
     7,194  		return t;
         .  	}
         .  
         .  
         .  	template<typename unOp> T accumulateMax( T init, unOp op, bool minimize ) const {
         .  		T t = op(init);
         .  		if( minimize ) {
         .  			for( const_iterator it = begin(); it != end(); it++ )
         .  				t = std::min( t, op(it->second) );
-- line 110 ----------------------------------------
-- line 120 ----------------------------------------
         .  	}
         .  
         .  	T entropy() const { return -accumulateSum( (T)0, fo_plog0p<T>() ); }
         .  
         .  	T max() const { return accumulateMax( (T)(-INFINITY), fo_id<T>(), false ); }
         .  
         .  	T min() const { return accumulateMax( (T)INFINITY, fo_id<T>(), true ); }
         .  
    25,179  	T sum() const { return accumulateSum( (T)0, fo_id<T>() ); }
         .  
         .  	T sumAbs() const { return accumulateSum( (T)0, fo_abs<T>() ); }
         .  
         .  	T maxAbs() const { return accumulateMax( (T)0, fo_abs<T>(), false ); }
         .  
         .  	bool hasNaNs() const {
         .  		if( isnan( def() ) && nrDef() )
         .  			return true;
-- line 136 ----------------------------------------
-- line 274 ----------------------------------------
         .  			DAI_THROW(NOT_NORMALIZABLE);
         .  			return *this;
         .  		} else
         .  			return pwUnaryTr( std::bind2nd( std::divides<T>(), Z ) );
         .  	}
         .  
         .  
         .  
     7,188  	template<typename unaryOp> this_type& pwUnaryOp( unaryOp op ) {
    14,376  		setDef( op( def() ) );
   563,874  		for( iterator it = begin(); it != end(); ) {
   335,200  			T new_val = op( it->second );
   435,760  			if( new_val != def() ) {
   201,120  				it->second = new_val;
   268,160  				it++;
         .  			} else
         .  				it = _p.erase( it );
         .  		}
     9,584  		return *this;
         .  	}
         .  
         .  	this_type& randomize() {
         .  		setDef(0);
         .  		for( size_t i = 0; i < size(); i++ )
         .  			set( i, (T)rnd_uniform() );
         .  		return *this;
         .  	}
-- line 300 ----------------------------------------
-- line 313 ----------------------------------------
         .  	this_type& takeLog(bool zero=false) {
         .  		if( zero ) {
         .  			return pwUnaryOp( fo_log0<T>() );
         .  		} else
         .  			return pwUnaryOp( fo_log<T>() );
         .  	}
         .  
         .  
     8,393  	T normalize( ProbNormType norm = dai::NORMPROB ) {
     3,597  		T Z = 0;
     3,597  		if( norm == dai::NORMPROB )
     5,995  			Z = sum();
         .  		else if( norm == dai::NORMLINF )
         .  			Z = maxAbs();
     5,995  		if( Z == (T)0)
         .  			DAI_THROW(NOT_NORMALIZABLE);
         .  		else
     4,796  			*this /= Z;
     9,592  		return Z;
         .  	}
         .  
         .  
         .  
     2,995  	this_type& fill( T x ) {
     2,396  		setDef( x );
     1,797  		_p.clearNonDef();
     4,792  		return *this;
         .  	}
         .  
         .  	this_type& operator+= (T x) {
         .  		if( x != 0)
         .  			return pwUnaryOp( std::bind2nd( std::plus<T>(), x ) );
         .  		else
         .  			return *this;
         .  	}
-- line 347 ----------------------------------------
-- line 355 ----------------------------------------
         .  
         .  	this_type& operator*= (T x) {
         .  		if( x !=  1)
         .  			return pwUnaryOp( std::bind2nd( std::multiplies<T>(), x ) );
         .  		else
         .  			return *this;
         .  	}
         .  
     5,995  	this_type& operator/= (T x) {
     5,997  		if( x !=  1)
    25,164  			return pwUnaryOp( std::bind2nd( fo_divides0<T>(), x ) );
         .  		else
         2  			return *this;
         .  	}
         .  
         .  	this_type& operator^= (T x) {
         .  		if( x != (T)1)
         .  			return pwUnaryOp( std::bind2nd( fo_pow<T>(), x) );
         .  		else
         .  			return *this;
         .  	}
-- line 375 ----------------------------------------
-- line 419 ----------------------------------------
         .  	this_type& divide (const this_type & q) { return pwBinaryOp( q, std::divides<T>() ); }
         .  
         .  
         .  	this_type& operator^= (const this_type & q) { return pwBinaryOp( q, fo_pow<T>() ); }
         .  
         .  
         .  
         .  
     8,386  	template<typename binaryOp> this_type pwBinaryTr( const this_type &q, binaryOp op ) const {
    15,574  		DAI_DEBASSERT( size() == q.size() );
     3,594  		this_type result;
    28,752  		result.setDef( op( def(), q.def() ) );
    11,980  		result._p.resize( size() );
 1,144,496  		for( typename this_type::const_iterator it = begin(); it != end(); it++ ) {
   770,960  			T new_val = op( it->second, q[it->first] );
   536,320  			if( new_val != result.def() )
   335,200  				result._p.push_back(it->first, new_val);
         .  		}
   591,416  		for( typename this_type::const_iterator it = q.begin(); it != q.end(); it++ ) {
   402,240  			T new_val = op( get(it->first), it->second );
   268,160  			if( new_val != result.def() )
   167,600  				result.set( it->first, new_val );
         .  		}
     5,990  		return result;
         .  	}
         .  
         .  
         .  	this_type operator+ ( const this_type& q ) const { return pwBinaryTr( q, std::plus<T>() ); }
         .  
         .  
         .  	this_type operator- ( const this_type& q ) const { return pwBinaryTr( q, std::minus<T>() ); }
         .  
-- line 450 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/vector.tcc
--------------------------------------------------------------------------------
       Ir 

-- line 84 ----------------------------------------
        .  	  this->_M_impl._M_finish = __tmp + __old_size;
        .  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
        .  	}
        .      }
        .  
        .    template<typename _Tp, typename _Alloc>
        .      typename vector<_Tp, _Alloc>::iterator
        .      vector<_Tp, _Alloc>::
2,034,144      insert(iterator __position, const value_type& __x)
        .      {
3,487,104        const size_type __n = __position - begin();
5,023,120        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
        .  	  && __position == end())
        .  	{
  543,466  	  this->_M_impl.construct(this->_M_impl._M_finish, __x);
  543,466  	  ++this->_M_impl._M_finish;
        .  	}
        .        else
1,277,724          _M_insert_aux(__position, __x);
5,811,840        return iterator(this->_M_impl._M_start + __n);
        .      }
        .  
        .    template<typename _Tp, typename _Alloc>
        .      typename vector<_Tp, _Alloc>::iterator
        .      vector<_Tp, _Alloc>::
        .      erase(iterator __position)
        .      {
        .        if (__position + 1 != end())
-- line 111 ----------------------------------------
-- line 124 ----------------------------------------
        .  	std::copy(__last, end(), __first);
        .        _M_erase_at_end(__first.base() + (end() - __last));
        .        return __first;
        .      }
        .  
        .    template<typename _Tp, typename _Alloc>
        .      vector<_Tp, _Alloc>&
        .      vector<_Tp, _Alloc>::
   65,900      operator=(const vector<_Tp, _Alloc>& __x)
        .      {
   52,720        if (&__x != this)
        .  	{
   52,720  	  const size_type __xlen = __x.size();
  144,980  	  if (__xlen > capacity())
        .  	    {
        .  	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
   92,246  						   __x.end());
   79,667  	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        .  			    _M_get_Tp_allocator());
   67,088  	      _M_deallocate(this->_M_impl._M_start,
        .  			    this->_M_impl._M_end_of_storage
        .  			    - this->_M_impl._M_start);
   12,579  	      this->_M_impl._M_start = __tmp;
   29,351  	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
        .  	    }
   98,857  	  else if (size() >= __xlen)
        .  	    {
  629,090  	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
        .  			    end(), _M_get_Tp_allocator());
        .  	    }
        .  	  else
        .  	    {
        .  	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
        .  			this->_M_impl._M_start);
        .  	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
        .  					  __x._M_impl._M_finish,
        .  					  this->_M_impl._M_finish,
        .  					  _M_get_Tp_allocator());
        .  	    }
  105,440  	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
        .  	}
  105,440        return *this;
        .      }
        .  
        .    template<typename _Tp, typename _Alloc>
        .      void
        .      vector<_Tp, _Alloc>::
        .      _M_fill_assign(size_t __n, const value_type& __val)
        .      {
        .        if (__n > capacity())
-- line 173 ----------------------------------------
-- line 237 ----------------------------------------
        .  					  this->_M_impl._M_finish,
        .  					  _M_get_Tp_allocator());
        .  	  }
        .        }
        .  
        .    template<typename _Tp, typename _Alloc>
        .      void
        .      vector<_Tp, _Alloc>::
1,318,440      _M_insert_aux(iterator __position, const _Tp& __x)
        .      {
1,318,440        if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        .  	{
   37,213  	  this->_M_impl.construct(this->_M_impl._M_finish,
        .  				  *(this->_M_impl._M_finish - 1));
   20,298  	  ++this->_M_impl._M_finish;
   16,915  	  _Tp __x_copy = __x;
   67,660  	  std::copy_backward(__position.base(),
        .  			     this->_M_impl._M_finish - 2,
        .  			     this->_M_impl._M_finish - 1);
   27,064  	  *__position = __x_copy;
        .  	}
        .        else
        .  	{
  865,428  	  const size_type __old_size = size();
2,379,927  	  if (__old_size == this->max_size())
        .  	    __throw_length_error(__N("vector::_M_insert_aux"));
        .  
        .  	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
        .  	  // __len overflows: if we don't notice and _M_allocate doesn't
        .  	  // throw we crash badly later.
1,880,938  	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
  865,428  	  if (__len < __old_size)
        .  	    __len = this->max_size();
        .  
1,298,142  	  pointer __new_start(this->_M_allocate(__len));
  432,714  	  pointer __new_finish(__new_start);
        .  	  try
        .  	    {
5,841,639  	      __new_finish =
        .  		std::__uninitialized_copy_a(this->_M_impl._M_start,
        .  					    __position.base(), __new_start,
        .  					    _M_get_Tp_allocator());
1,298,142  	      this->_M_impl.construct(__new_finish, __x);
  865,428  	      ++__new_finish;
6,490,710  	      __new_finish =
        .  		std::__uninitialized_copy_a(__position.base(),
        .  					    this->_M_impl._M_finish,
        .  					    __new_finish,
        .  					    _M_get_Tp_allocator());
        .  	    }
        .  	  catch(...)
        .  	    {
        .  	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
        .  	      _M_deallocate(__new_start, __len);
        .  	      __throw_exception_again;
        .  	    }
4,327,140  	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        .  			_M_get_Tp_allocator());
3,461,712  	  _M_deallocate(this->_M_impl._M_start,
        .  			this->_M_impl._M_end_of_storage
        .  			- this->_M_impl._M_start);
  649,071  	  this->_M_impl._M_start = __new_start;
  649,071  	  this->_M_impl._M_finish = __new_finish;
2,173,719  	  this->_M_impl._M_end_of_storage = __new_start + __len;
        .  	}
        .      }
        .  
        .    template<typename _Tp, typename _Alloc>
        .      void
        .      vector<_Tp, _Alloc>::
        .      _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
        .      {
-- line 308 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_algo.h
--------------------------------------------------------------------------------
        Ir 

-- line 2877 ----------------------------------------
         .     *  @param  val     The search term.
         .     *  @return  An iterator pointing to the first element "not less than" @a val,
         .     *           or end() if every element is less than @a val.
         .     *  @ingroup binarysearch
         .    */
         .    template<typename _ForwardIterator, typename _Tp>
         .      _ForwardIterator
         .      lower_bound(_ForwardIterator __first, _ForwardIterator __last,
 1,116,096  		const _Tp& __val)
         .      {
         .        typedef typename iterator_traits<_ForwardIterator>::value_type
         .  	_ValueType;
         .        typedef typename iterator_traits<_ForwardIterator>::difference_type
         .  	_DistanceType;
         .  
         .        // concept requirements
         .        __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)
         .        __glibcxx_requires_partitioned(__first, __last, __val);
         .  
 1,116,096        _DistanceType __len = std::distance(__first, __last);
         .        _DistanceType __half;
   744,064        _ForwardIterator __middle;
         .  
   929,280        while (__len > 0)
         .  	{
   371,232  	  __half = __len >> 1;
   371,232  	  __middle = __first;
   742,464  	  std::advance(__middle, __half);
 1,237,440  	  if (*__middle < __val)
         .  	    {
   494,976  	      __first = __middle;
   123,744  	      ++__first;
   866,208  	      __len = __len - __half - 1;
         .  	    }
         .  	  else
         .  	    __len = __half;
         .  	}
 1,488,128        return __first;
         .      }
         .  
         .    /**
         .     *  @brief Finds the first position in which @a val could be inserted
         .     *         without changing the ordering.
         .     *  @param  first   An iterator.
         .     *  @param  last    Another iterator.
         .     *  @param  val     The search term.
-- line 2923 ----------------------------------------
-- line 2927 ----------------------------------------
         .     *  @ingroup binarysearch
         .     *
         .     *  The comparison function should have the same effects on ordering as
         .     *  the function used for the initial sort.
         .    */
         .    template<typename _ForwardIterator, typename _Tp, typename _Compare>
         .      _ForwardIterator
         .      lower_bound(_ForwardIterator __first, _ForwardIterator __last,
 1,523,136  		const _Tp& __val, _Compare __comp)
         .      {
         .        typedef typename iterator_traits<_ForwardIterator>::value_type
         .  	_ValueType;
         .        typedef typename iterator_traits<_ForwardIterator>::difference_type
         .  	_DistanceType;
         .  
         .        // concept requirements
         .        __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
         .        __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
         .  				  _ValueType, _Tp>)
         .        __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);
         .  
 2,030,848        _DistanceType __len = std::distance(__first, __last);
         .        _DistanceType __half;
 1,015,424        _ForwardIterator __middle;
         .  
 3,628,407        while (__len > 0)
         .  	{
 2,866,839  	  __half = __len >> 1;
 2,866,839  	  __middle = __first;
 5,733,678  	  std::advance(__middle, __half);
10,511,743  	  if (__comp(*__middle, __val))
         .  	    {
 2,842,976  	      __first = __middle;
   710,744  	      ++__first;
 4,975,208  	      __len = __len - __half - 1;
         .  	    }
         .  	  else
   489,738  	    __len = __half;
         .  	}
 2,030,848        return __first;
         .      }
         .  
         .    /**
         .     *  @brief Finds the last position in which @a val could be inserted
         .     *         without changing the ordering.
         .     *  @param  first   An iterator.
         .     *  @param  last    Another iterator.
         .     *  @param  val     The search term.
-- line 2974 ----------------------------------------
-- line 4391 ----------------------------------------
         .     *  both ranges advance.  The output range may not overlap either input
         .     *  range.
         .    */
         .    template<typename _InputIterator1, typename _InputIterator2,
         .  	   typename _OutputIterator>
         .      _OutputIterator
         .      set_union(_InputIterator1 __first1, _InputIterator1 __last1,
         .  	      _InputIterator2 __first2, _InputIterator2 __last2,
    10,782  	      _OutputIterator __result)
         .      {
         .        typedef typename iterator_traits<_InputIterator1>::value_type
         .  	_ValueType1;
         .        typedef typename iterator_traits<_InputIterator2>::value_type
         .  	_ValueType2;
         .  
         .        // concept requirements
         .        __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
-- line 4407 ----------------------------------------
-- line 4410 ----------------------------------------
         .  				  _ValueType1>)
         .        __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
         .  				  _ValueType2>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)
         .        __glibcxx_requires_sorted(__first1, __last1);
         .        __glibcxx_requires_sorted(__first2, __last2);
         .  
   120,395        while (__first1 != __last1 && __first2 != __last2)
         .  	{
    44,925  	  if (*__first1 < *__first2)
         .  	    {
    11,988  	      *__result = *__first1;
     1,998  	      ++__first1;
         .  	    }
    29,940  	  else if (*__first2 < *__first1)
         .  	    {
         .  	      *__result = *__first2;
         .  	      ++__first2;
         .  	    }
         .  	  else
         .  	    {
    23,952  	      *__result = *__first1;
     1,996  	      ++__first1;
     5,988  	      ++__first2;
         .  	    }
     8,985  	  ++__result;
         .  	}
         .        return std::copy(__first2, __last2, std::copy(__first1, __last1,
    39,534  						    __result));
         .      }
         .  
         .    /**
         .     *  @brief Return the union of two sorted ranges using a comparison functor.
         .     *  @param  first1  Start of first range.
         .     *  @param  last1   End of first range.
         .     *  @param  first2  Start of second range.
         .     *  @param  last2   End of second range.
-- line 4447 ----------------------------------------
-- line 4523 ----------------------------------------
         .     *  element from the first range is copied and both ranges advance.  The
         .     *  output range may not overlap either input range.
         .    */
         .    template<typename _InputIterator1, typename _InputIterator2,
         .  	   typename _OutputIterator>
         .      _OutputIterator
         .      set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         .  		     _InputIterator2 __first2, _InputIterator2 __last2,
    21,564  		     _OutputIterator __result)
         .      {
         .        typedef typename iterator_traits<_InputIterator1>::value_type
         .  	_ValueType1;
         .        typedef typename iterator_traits<_InputIterator2>::value_type
         .  	_ValueType2;
         .  
         .        // concept requirements
         .        __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
-- line 4539 ----------------------------------------
-- line 4540 ----------------------------------------
         .        __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
         .        __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
         .  				  _ValueType1>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)
         .        __glibcxx_requires_sorted(__first1, __last1);
         .        __glibcxx_requires_sorted(__first2, __last2);
         .  
   236,002        while (__first1 != __last1 && __first2 != __last2)
    89,850  	if (*__first1 < *__first2)
     3,996  	  ++__first1;
    74,865  	else if (*__first2 < *__first1)
     3,996  	  ++__first2;
         .  	else
         .  	  {
    51,896  	    *__result = *__first1;
     3,992  	    ++__first1;
    15,968  	    ++__first2;
     3,992  	    ++__result;
         .  	  }
    33,544        return __result;
         .      }
         .  
         .    /**
         .     *  @brief Return the intersection of two sorted ranges using comparison
         .     *  functor.
         .     *  @param  first1  Start of first range.
         .     *  @param  last1   End of first range.
         .     *  @param  first2  Start of second range.
-- line 4568 ----------------------------------------
-- line 4636 ----------------------------------------
         .     *  contained in both ranges, no elements are copied and both ranges
         .     *  advance.  The output range may not overlap either input range.
         .    */
         .    template<typename _InputIterator1, typename _InputIterator2,
         .  	   typename _OutputIterator>
         .      _OutputIterator
         .      set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
         .  		   _InputIterator2 __first2, _InputIterator2 __last2,
    10,782  		   _OutputIterator __result)
         .      {
         .        typedef typename iterator_traits<_InputIterator1>::value_type
         .  	_ValueType1;
         .        typedef typename iterator_traits<_InputIterator2>::value_type
         .  	_ValueType2;
         .  
         .        // concept requirements
         .        __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
-- line 4652 ----------------------------------------
-- line 4653 ----------------------------------------
         .        __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
         .        __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
         .  				  _ValueType1>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)
         .        __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)	
         .        __glibcxx_requires_sorted(__first1, __last1);
         .        __glibcxx_requires_sorted(__first2, __last2);
         .  
   120,395        while (__first1 != __last1 && __first2 != __last2)
    44,925  	if (*__first1 < *__first2)
         .  	  {
    12,987  	    *__result = *__first1;
     1,998  	    ++__first1;
     1,998  	    ++__result;
         .  	  }
    29,940  	else if (*__first2 < *__first1)
         .  	  ++__first2;
         .  	else
         .  	  {
     5,988  	    ++__first1;
     5,988  	    ++__first2;
         .  	  }
    26,356        return std::copy(__first1, __last1, __result);
         .      }
         .  
         .    /**
         .     *  @brief  Return the difference of two sorted ranges using comparison
         .     *  functor.
         .     *  @param  first1  Start of first range.
         .     *  @param  last1   End of first range.
         .     *  @param  first2  Start of second range.
-- line 4683 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/util.h
--------------------------------------------------------------------------------
         Ir 

-- line 96 ----------------------------------------
          .  
          .  /// Real number (alias for \c double, which could be changed to <tt>long double</tt> if necessary)
          .  typedef double Real;
          .  
          .  /// Arbitrary precision integer number
          .  typedef mpz_class BigInt;
          .  
          .  /// Safe down-cast of big integer to size_t
 18,044,712  inline size_t BigInt_size_t( const BigInt &N ) {
108,268,272      DAI_ASSERT( N <= (BigInt)std::numeric_limits<std::size_t>::max() );
 31,578,246      return N.get_ui();
          .  }
          .  
          .  /// Returns true if argument is NAN (Not A Number)
          .  bool isnan( Real x );
          .  
          .  /// Returns logarithm of \a x
      2,400  inline Real log( Real x ) {
      5,400      return std::log(x);
          .  }
          .  
          .  /// Returns logarithm of \a x, or 0 if \a x == 0
          .  inline Real log0( Real x ) {
          .      return x ? std::log(x) : 0;
          .  }
          .  
          .  /// Returns exponent of \a x
-- line 122 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/limits
--------------------------------------------------------------------------------
        Ir 

-- line 827 ----------------------------------------
         .    /// numeric_limits<unsigned long> specialization.
         .    template<>
         .      struct numeric_limits<unsigned long>
         .      {
         .        static const bool is_specialized = true;
         .  
         .        static unsigned long min() throw()
         .        { return 0; }
 9,022,356        static unsigned long max() throw()
36,089,424        { return __LONG_MAX__ * 2UL + 1; }
         .  
         .        static const int digits = __glibcxx_digits (unsigned long);
         .        static const int digits10 = __glibcxx_digits10 (unsigned long);
         .        static const bool is_signed = false;
         .        static const bool is_integer = true;
         .        static const bool is_exact = true;
         .        static const int radix = 2;
         .        static unsigned long epsilon() throw()
-- line 844 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_map.h
--------------------------------------------------------------------------------
        Ir 

-- line 86 ----------------------------------------
         .     *  The private tree data is declared exactly the same way for map and
         .     *  multimap; the distinction is made entirely in how the tree functions are
         .     *  called (*_unique versus *_equal, same as the standard).
         .     *  @endif
         .    */
         .    template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
         .              typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
         .      class map
22,744,960      {
         .      public:
         .        typedef _Key                                          key_type;
         .        typedef _Tp                                           mapped_type;
         .        typedef std::pair<const _Key, _Tp>                    value_type;
         .        typedef _Compare                                      key_compare;
         .        typedef _Alloc                                        allocator_type;
         .  
         .      private:
-- line 102 ----------------------------------------
-- line 149 ----------------------------------------
         .        typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
         .  
         .        // [23.3.1.1] construct/copy/destroy
         .        // (get_allocator() is normally listed in this section, but seems to have
         .        // been accidentally omitted in the printed standard)
         .        /**
         .         *  @brief  Default constructor creates no elements.
         .         */
 8,848,896        map()
44,244,480        : _M_t(_Compare(), allocator_type()) { }
         .  
         .        // for some reason this was made a separate function
         .        /**
         .         *  @brief  Default constructor creates no elements.
         .         */
         .        explicit
         .        map(const _Compare& __comp, const allocator_type& __a = allocator_type())
         .        : _M_t(__comp, __a) { }
-- line 166 ----------------------------------------
-- line 167 ----------------------------------------
         .  
         .        /**
         .         *  @brief  Map copy constructor.
         .         *  @param  x  A %map of identical element and allocator types.
         .         *
         .         *  The newly-created %map uses a copy of the allocation object used
         .         *  by @a x.
         .         */
   311,360        map(const map& __x)
   498,176        : _M_t(__x._M_t) { }
         .  
         .        /**
         .         *  @brief  Builds a %map from a range.
         .         *  @param  first  An input iterator.
         .         *  @param  last  An input iterator.
         .         *
         .         *  Create a %map consisting of copies of the elements from [first,last).
         .         *  This is linear in N if the range is already sorted, and NlogN
-- line 184 ----------------------------------------
-- line 245 ----------------------------------------
         .        { return _M_t.begin(); }
         .  
         .        /**
         .         *  Returns a read-only (constant) iterator that points to the first pair
         .         *  in the %map.  Iteration is done in ascending order according to the
         .         *  keys.
         .         */
         .        const_iterator
   498,176        begin() const
 1,494,528        { return _M_t.begin(); }
         .  
         .        /**
         .         *  Returns a read/write iterator that points one past the last
         .         *  pair in the %map.  Iteration is done in ascending order
         .         *  according to the keys.
         .         */
         .        iterator
18,010,368        end()
54,031,104        { return _M_t.end(); }
         .  
         .        /**
         .         *  Returns a read-only (constant) iterator that points one past the last
         .         *  pair in the %map.  Iteration is done in ascending order according to
         .         *  the keys.
         .         */
         .        const_iterator
21,519,488        end() const
64,558,464        { return _M_t.end(); }
         .  
         .        /**
         .         *  Returns a read/write reverse iterator that points to the last pair in
         .         *  the %map.  Iteration is done in descending order according to the
         .         *  keys.
         .         */
         .        reverse_iterator
         .        rbegin()
-- line 280 ----------------------------------------
-- line 334 ----------------------------------------
         .         *  Allows for easy lookup with the subscript ( @c [] )
         .         *  operator.  Returns data associated with the key specified in
         .         *  subscript.  If the key does not exist, a pair with that key
         .         *  is created using default values, which is then returned.
         .         *
         .         *  Lookup requires logarithmic time.
         .         */
         .        mapped_type&
22,512,960        operator[](const key_type& __k)
         .        {
         .  	// concept requirements
         .  	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
         .  
40,523,328  	iterator __i = lower_bound(__k);
         .  	// __i->first is greater than or equivalent to __k.
94,554,432  	if (__i == end() || key_comp()(__k, (*__i).first))
76,544,064            __i = insert(__i, value_type(__k, mapped_type()));
54,031,104  	return (*__i).second;
         .        }
         .  
         .        // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .        // DR 464. Suggestion for new member functions in standard containers.
         .        /**
         .         *  @brief  Access to %map data.
         .         *  @param  k  The key for which data should be retrieved.
         .         *  @return  A reference to the data whose key is equivalent to @a k, if
-- line 359 ----------------------------------------
-- line 418 ----------------------------------------
         .         *
         .         *  See
         .         *  http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4
         .         *  for more on "hinting".
         .         *
         .         *  Insertion requires logarithmic time (if the hint is not taken).
         .         */
         .        iterator
27,015,552        insert(iterator __position, const value_type& __x)
67,538,880        { return _M_t._M_insert_unique(__position, __x); }
         .  
         .        /**
         .         *  @brief Template function that attemps to insert a range of elements.
         .         *  @param  first  Iterator pointing to the start of the range to be
         .         *                 inserted.
         .         *  @param  last  Iterator pointing to the end of the range.
         .         *
         .         *  Complexity similar to that of the range constructor.
         .         */
         .        template <typename _InputIterator>
         .          void
   373,632          insert(_InputIterator __first, _InputIterator __last)
   560,448          { _M_t._M_insert_unique(__first, __last); }
         .  
         .        /**
         .         *  @brief Erases an element from a %map.
         .         *  @param  position  An iterator pointing to the element to be erased.
         .         *
         .         *  This function erases an element, pointed to by the given
         .         *  iterator, from a %map.  Note that this function only erases
         .         *  the element, and that if the element is itself a pointer,
-- line 448 ----------------------------------------
-- line 548 ----------------------------------------
         .         *           element, or end() if not found.
         .         *
         .         *  This function takes a key and tries to locate the element with which
         .         *  the key matches.  If successful the function returns a constant
         .         *  iterator pointing to the sought after %pair. If unsuccessful it
         .         *  returns the past-the-end ( @c end() ) iterator.
         .         */
         .        const_iterator
25,346,560        find(const key_type& __x) const
70,970,368        { return _M_t.find(__x); }
         .  
         .        /**
         .         *  @brief  Finds the number of elements with given key.
         .         *  @param  x  Key of (key, value) pairs to be located.
         .         *  @return  Number of elements with specified key.
         .         *
         .         *  This function only makes sense for multimaps; for map the result will
         .         *  either be 0 (not present) or 1 (present).
-- line 565 ----------------------------------------
-- line 575 ----------------------------------------
         .         *           than key, or end().
         .         *
         .         *  This function returns the first element of a subsequence of elements
         .         *  that matches the given key.  If unsuccessful it returns an iterator
         .         *  pointing to the first element that has a greater value than given key
         .         *  or end() if no such element exists.
         .         */
         .        iterator
22,512,960        lower_bound(const key_type& __x)
63,036,288        { return _M_t.lower_bound(__x); }
         .  
         .        /**
         .         *  @brief Finds the beginning of a subsequence matching given key.
         .         *  @param  x  Key of (key, value) pair to be located.
         .         *  @return  Read-only (constant) iterator pointing to first element
         .         *           equal to or greater than key, or end().
         .         *
         .         *  This function returns the first element of a subsequence of elements
-- line 592 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_pair.h
--------------------------------------------------------------------------------
        Ir 

-- line 61 ----------------------------------------
         .  #ifndef _PAIR_H
         .  #define _PAIR_H 1
         .  
         .  _GLIBCXX_BEGIN_NAMESPACE(std)
         .  
         .    /// pair holds two objects of arbitrary type.
         .    template<class _T1, class _T2>
         .      struct pair
25,887,550      {
         .        typedef _T1 first_type;    ///<  @c first_type is the first bound type
         .        typedef _T2 second_type;   ///<  @c second_type is the second bound type
         .  
         .        _T1 first;                 ///< @c first is a copy of the first object
         .        _T2 second;                ///< @c second is a copy of the second object
         .  
         .        // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .        // 265.  std::pair::pair() effects overly restrictive
         .        /** The default constructor creates @c first and @c second using their
         .         *  respective default constructors.  */
         .        pair()
         .        : first(), second() { }
         .  
         .        /** Two objects may be passed to a @c pair constructor to be copied.  */
36,056,640        pair(const _T1& __a, const _T2& __b)
85,769,600        : first(__a), second(__b) { }
         .  
         .        /** There is also a templated copy ctor for the @c pair class itself.  */
         .        template<class _U1, class _U2>
         .          pair(const pair<_U1, _U2>& __p)
         .  	: first(__p.first), second(__p.second) { }
         .      };
         .  
         .    /// Two pairs of the same type are equal iff their members are equal.
-- line 93 ----------------------------------------
-- line 136 ----------------------------------------
         .     *  The standard requires that the objects be passed by reference-to-const,
         .     *  but LWG issue #181 says they should be passed by const value.  We follow
         .     *  the LWG by default.
         .     */
         .    // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .    // 181.  make_pair() unintended behavior
         .    template<class _T1, class _T2>
         .      inline pair<_T1, _T2>
 1,915,840      make_pair(_T1 __x, _T2 __y)
 7,280,192      { return pair<_T1, _T2>(__x, __y); }
         .  
         .  _GLIBCXX_END_NAMESPACE
         .  
         .  #endif /* _PAIR_H */

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_tree.h
--------------------------------------------------------------------------------
         Ir 

-- line 98 ----------------------------------------
          .      typedef const _Rb_tree_node_base* _Const_Base_ptr;
          .  
          .      _Rb_tree_color	_M_color;
          .      _Base_ptr		_M_parent;
          .      _Base_ptr		_M_left;
          .      _Base_ptr		_M_right;
          .  
          .      static _Base_ptr
    186,816      _S_minimum(_Base_ptr __x)
          .      {
    741,664        while (__x->_M_left != 0) __x = __x->_M_left;
    435,904        return __x;
          .      }
          .  
          .      static _Const_Base_ptr
          .      _S_minimum(_Const_Base_ptr __x)
          .      {
          .        while (__x->_M_left != 0) __x = __x->_M_left;
          .        return __x;
          .      }
          .  
          .      static _Base_ptr
    186,816      _S_maximum(_Base_ptr __x)
          .      {
    747,264        while (__x->_M_right != 0) __x = __x->_M_right;
    435,904        return __x;
          .      }
          .  
          .      static _Const_Base_ptr
          .      _S_maximum(_Const_Base_ptr __x)
          .      {
          .        while (__x->_M_right != 0) __x = __x->_M_right;
          .        return __x;
          .      }
-- line 131 ----------------------------------------
-- line 163 ----------------------------------------
          .        typedef _Rb_tree_iterator<_Tp>        _Self;
          .        typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
          .        typedef _Rb_tree_node<_Tp>*           _Link_type;
          .  
          .        _Rb_tree_iterator()
          .        : _M_node() { }
          .  
          .        explicit
 72,740,736        _Rb_tree_iterator(_Link_type __x)
 90,925,920        : _M_node(__x) { }
          .  
          .        reference
 13,507,776        operator*() const
 45,025,920        { return static_cast<_Link_type>(_M_node)->_M_value_field; }
          .  
          .        pointer
          .        operator->() const
          .        { return &static_cast<_Link_type>(_M_node)->_M_value_field; }
          .  
          .        _Self&
          .        operator++()
          .        {
-- line 184 ----------------------------------------
-- line 190 ----------------------------------------
          .        operator++(int)
          .        {
          .  	_Self __tmp = *this;
          .  	_M_node = _Rb_tree_increment(_M_node);
          .  	return __tmp;
          .        }
          .  
          .        _Self&
    105,088        operator--()
          .        {
    157,632  	_M_node = _Rb_tree_decrement(_M_node);
    210,176  	return *this;
          .        }
          .  
          .        _Self
          .        operator--(int)
          .        {
          .  	_Self __tmp = *this;
          .  	_M_node = _Rb_tree_decrement(_M_node);
          .  	return __tmp;
          .        }
          .  
          .        bool
 26,964,352        operator==(const _Self& __x) const
101,116,320        { return _M_node == __x._M_node; }
          .  
          .        bool
          .        operator!=(const _Self& __x) const
          .        { return _M_node != __x._M_node; }
          .  
          .        _Base_ptr _M_node;
          .    };
          .  
-- line 222 ----------------------------------------
-- line 235 ----------------------------------------
          .        typedef _Rb_tree_const_iterator<_Tp>        _Self;
          .        typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
          .        typedef const _Rb_tree_node<_Tp>*           _Link_type;
          .  
          .        _Rb_tree_const_iterator()
          .        : _M_node() { }
          .  
          .        explicit
 62,572,160        _Rb_tree_const_iterator(_Link_type __x)
 78,215,200        : _M_node(__x) { }
          .  
          .        _Rb_tree_const_iterator(const iterator& __it)
          .        : _M_node(__it._M_node) { }
          .  
          .        reference
    340,032        operator*() const
  1,133,440        { return static_cast<_Link_type>(_M_node)->_M_value_field; }
          .  
          .        pointer
 15,765,984        operator->() const
 52,553,280        { return &static_cast<_Link_type>(_M_node)->_M_value_field; }
          .  
          .        _Self&
    453,376        operator++()
          .        {
    680,064  	_M_node = _Rb_tree_increment(_M_node);
    906,752  	return *this;
          .        }
          .  
          .        _Self
    930,080        operator++(int)
          .        {
    930,080  	_Self __tmp = *this;
  1,116,096  	_M_node = _Rb_tree_increment(_M_node);
  1,488,128  	return __tmp;
          .        }
          .  
          .        _Self&
          .        operator--()
          .        {
          .  	_M_node = _Rb_tree_decrement(_M_node);
          .  	return *this;
          .        }
-- line 277 ----------------------------------------
-- line 280 ----------------------------------------
          .        operator--(int)
          .        {
          .  	_Self __tmp = *this;
          .  	_M_node = _Rb_tree_decrement(_M_node);
          .  	return __tmp;
          .        }
          .  
          .        bool
 38,612,992        operator==(const _Self& __x) const
144,798,720        { return _M_node == __x._M_node; }
          .  
          .        bool
  3,637,120        operator!=(const _Self& __x) const
 13,639,200        { return _M_node != __x._M_node; }
          .  
          .        _Base_ptr _M_node;
          .      };
          .  
          .    template<typename _Val>
          .      inline bool
          .      operator==(const _Rb_tree_iterator<_Val>& __x,
          .                 const _Rb_tree_const_iterator<_Val>& __y)
-- line 301 ----------------------------------------
-- line 351 ----------------------------------------
          .        typedef ptrdiff_t difference_type;
          .        typedef _Alloc allocator_type;
          .  
          .        _Node_allocator&
          .        _M_get_Node_allocator()
          .        { return *static_cast<_Node_allocator*>(&this->_M_impl); }
          .        
          .        const _Node_allocator&
 28,318,464        _M_get_Node_allocator() const
 66,076,416        { return *static_cast<const _Node_allocator*>(&this->_M_impl); }
          .  
          .        allocator_type
 56,263,296        get_allocator() const
121,903,808        { return allocator_type(_M_get_Node_allocator()); }
          .  
          .      protected:
          .        _Rb_tree_node*
 18,754,432        _M_get_node()
 60,951,904        { return _M_impl._Node_allocator::allocate(1); }
          .  
          .        void
 23,443,040        _M_put_node(_Rb_tree_node* __p)
 42,197,472        { _M_impl._Node_allocator::deallocate(__p, 1); }
          .  
          .        _Link_type
 23,443,040        _M_create_node(const value_type& __x)
          .        {
 18,754,432  	_Link_type __tmp = _M_get_node();
          .  	try
 89,083,552  	  { get_allocator().construct(&__tmp->_M_value_field, __x); }
 18,754,432  	catch(...)
          .  	  {
          .  	    _M_put_node(__tmp);
          .  	    __throw_exception_again;
          .  	  }
 23,443,040  	return __tmp;
          .        }
          .  
          .        _Link_type
    930,080        _M_clone_node(_Const_Link_type __x)
          .        {
  1,488,128  	_Link_type __tmp = _M_create_node(__x->_M_value_field);
    744,064  	__tmp->_M_color = __x->_M_color;
    372,032  	__tmp->_M_left = 0;
    372,032  	__tmp->_M_right = 0;
  1,488,128  	return __tmp;
          .        }
          .  
          .        void
 23,443,040        _M_destroy_node(_Link_type __p)
          .        {
 75,017,728  	get_allocator().destroy(&__p->_M_value_field);
 37,508,864  	_M_put_node(__p);
          .        }
          .  
          .      protected:
          .        template<typename _Key_compare, 
          .  	       bool _Is_pod_comparator = std::__is_pod<_Key_compare>::__value>
          .          struct _Rb_tree_impl : public _Node_allocator
 22,744,960          {
          .  	  _Key_compare		_M_key_compare;
          .  	  _Rb_tree_node_base 	_M_header;
          .  	  size_type 		_M_node_count; // Keeps track of size of tree.
          .  
          .  	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),
 13,646,976  			const _Key_compare& __comp = _Key_compare())
          .  	  : _Node_allocator(__a), _M_key_compare(__comp), _M_header(), 
 27,293,952  	    _M_node_count(0)
          .  	  {
  4,548,992  	    this->_M_header._M_color = _S_red;
  4,548,992  	    this->_M_header._M_parent = 0;
 11,372,480  	    this->_M_header._M_left = &this->_M_header;
 18,195,968  	    this->_M_header._M_right = &this->_M_header;
          .  	  }
          .  	};
          .  
          .        // Specialization for _Comparison types that are not capable of
          .        // being base classes / super classes.
          .        template<typename _Key_compare>
          .          struct _Rb_tree_impl<_Key_compare, true> : public _Node_allocator 
          .  	{
-- line 431 ----------------------------------------
-- line 444 ----------------------------------------
          .  	    this->_M_header._M_right = &this->_M_header;
          .  	  }
          .  	};
          .  
          .        _Rb_tree_impl<_Compare> _M_impl;
          .  
          .      protected:
          .        _Base_ptr&
    560,448        _M_root()
  2,054,976        { return this->_M_impl._M_header._M_parent; }
          .  
          .        _Const_Base_ptr
    186,816        _M_root() const
    498,176        { return this->_M_impl._M_header._M_parent; }
          .  
          .        _Base_ptr&
    186,816        _M_leftmost()
    684,992        { return this->_M_impl._M_header._M_left; }
          .  
          .        _Const_Base_ptr
          .        _M_leftmost() const
          .        { return this->_M_impl._M_header._M_left; }
          .  
          .        _Base_ptr&
 14,269,056        _M_rightmost()
 52,319,872        { return this->_M_impl._M_header._M_right; }
          .  
          .        _Const_Base_ptr
          .        _M_rightmost() const
          .        { return this->_M_impl._M_header._M_right; }
          .  
          .        _Link_type
 27,307,968        _M_begin()
 72,821,248        { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
          .  
          .        _Const_Link_type
 15,394,752        _M_begin() const
          .        {
          .  	return static_cast<_Const_Link_type>
 41,052,672  	  (this->_M_impl._M_header._M_parent);
          .        }
          .  
          .        _Link_type
 48,026,880        _M_end()
144,080,640        { return static_cast<_Link_type>(&this->_M_impl._M_header); }
          .  
          .        _Const_Link_type
 15,207,936        _M_end() const
 45,623,808        { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }
          .  
          .        static const_reference
 32,056,032        _S_value(_Const_Link_type __x)
 96,168,096        { return __x->_M_value_field; }
          .  
          .        static const _Key&
 42,741,376        _S_key(_Const_Link_type __x)
192,336,192        { return _KeyOfValue()(_S_value(__x)); }
          .  
          .        static _Link_type
 14,252,484        _S_left(_Base_ptr __x)
 38,006,624        { return static_cast<_Link_type>(__x->_M_left); }
          .  
          .        static _Const_Link_type
 20,556,420        _S_left(_Const_Base_ptr __x)
 54,817,120        { return static_cast<_Const_Link_type>(__x->_M_left); }
          .  
          .        static _Link_type
 21,799,164        _S_right(_Base_ptr __x)
 58,131,104        { return static_cast<_Link_type>(__x->_M_right); }
          .  
          .        static _Const_Link_type
  4,324,476        _S_right(_Const_Base_ptr __x)
 11,531,936        { return static_cast<_Const_Link_type>(__x->_M_right); }
          .  
          .        static const_reference
 29,630,208        _S_value(_Const_Base_ptr __x)
 88,890,624        { return static_cast<_Const_Link_type>(__x)->_M_value_field; }
          .  
          .        static const _Key&
 39,506,944        _S_key(_Const_Base_ptr __x)
177,781,248        { return _KeyOfValue()(_S_value(__x)); }
          .  
          .        static _Base_ptr
    249,088        _S_minimum(_Base_ptr __x)
    622,720        { return _Rb_tree_node_base::_S_minimum(__x); }
          .  
          .        static _Const_Base_ptr
          .        _S_minimum(_Const_Base_ptr __x)
          .        { return _Rb_tree_node_base::_S_minimum(__x); }
          .  
          .        static _Base_ptr
    249,088        _S_maximum(_Base_ptr __x)
    622,720        { return _Rb_tree_node_base::_S_maximum(__x); }
          .  
          .        static _Const_Base_ptr
          .        _S_maximum(_Const_Base_ptr __x)
          .        { return _Rb_tree_node_base::_S_maximum(__x); }
          .  
          .      public:
          .        typedef _Rb_tree_iterator<value_type>       iterator;
          .        typedef _Rb_tree_const_iterator<value_type> const_iterator;
-- line 544 ----------------------------------------
-- line 569 ----------------------------------------
          .        // allocation/deallocation
          .        _Rb_tree()
          .        { }
          .  
          .        _Rb_tree(const _Compare& __comp)
          .        : _M_impl(allocator_type(), __comp)
          .        { }
          .  
 13,273,344        _Rb_tree(const _Compare& __comp, const allocator_type& __a)
 30,971,136        : _M_impl(__a, __comp)
  6,636,672        { }
          .  
    311,360        _Rb_tree(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    622,720        : _M_impl(__x._M_get_Node_allocator(), __x._M_impl._M_key_compare)
          .        {
    622,720  	if (__x._M_root() != 0)
          .  	  {
  1,369,984  	    _M_root() = _M_copy(__x._M_begin(), _M_end());
    747,264  	    _M_leftmost() = _S_minimum(_M_root());
    747,264  	    _M_rightmost() = _S_maximum(_M_root());
    498,176  	    _M_impl._M_node_count = __x._M_impl._M_node_count;
          .  	  }
          .        }
          .  
  9,097,984        ~_Rb_tree()
 38,666,432        { _M_erase(_M_begin()); }
          .  
          .        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
          .        operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x);
          .  
          .        // Accessors.
          .        _Compare
          .        key_comp() const
          .        { return _M_impl._M_key_compare; }
          .  
          .        iterator
  8,953,984        begin()
          .        { 
          .  	return iterator(static_cast<_Link_type>
 31,338,944  			(this->_M_impl._M_header._M_left));
          .        }
          .  
          .        const_iterator
    498,176        begin() const
          .        { 
          .  	return const_iterator(static_cast<_Const_Link_type>
  1,743,616  			      (this->_M_impl._M_header._M_left));
          .        }
          .  
          .        iterator
 18,463,744        end()
 69,239,040        { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }
          .  
          .        const_iterator
 41,796,736        end() const
          .        { 
          .  	return const_iterator(static_cast<_Const_Link_type>
156,737,760  			      (&this->_M_impl._M_header));
          .        }
          .  
          .        reverse_iterator
          .        rbegin()
          .        { return reverse_iterator(end()); }
          .  
          .        const_reverse_iterator
          .        rbegin() const
-- line 634 ----------------------------------------
-- line 642 ----------------------------------------
          .        rend() const
          .        { return const_reverse_iterator(begin()); }
          .  
          .        bool
          .        empty() const
          .        { return _M_impl._M_node_count == 0; }
          .  
          .        size_type
 13,847,808        size() const
 36,927,488        { return _M_impl._M_node_count; }
          .  
          .        size_type
          .        max_size() const
          .        { return get_allocator().max_size(); }
          .  
          .        void
          .        swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);
          .  
-- line 659 ----------------------------------------
-- line 826 ----------------------------------------
          .  	}
          .        return *this;
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 31,518,144      _M_insert(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
          .      {
          .        bool __insert_left = (__x != 0 || __p == _M_end()
          .  			    || _M_impl._M_key_compare(_KeyOfValue()(__v), 
102,050,688  						      _S_key(__p)));
          .  
 27,015,552        _Link_type __z = _M_create_node(__v);
          .  
 63,036,288        _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,  
          .  				    this->_M_impl._M_header);
 27,015,552        ++_M_impl._M_node_count;
 58,533,696        return iterator(__z);
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
          .      _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
          .      {
-- line 853 ----------------------------------------
-- line 966 ----------------------------------------
          .  	_S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
          .  			   _Compare, _Alloc>::iterator, bool>
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 11,627,840      _M_insert_unique(const _Val& __v)
          .      {
  9,302,272        _Link_type __x = _M_begin();
  9,302,272        _Link_type __y = _M_end();
  4,651,136        bool __comp = true;
  7,656,768        while (__x != 0)
          .  	{
    453,376  	  __y = __x;
  4,307,072  	  __comp = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x));
  2,102,412  	  __x = __comp ? _S_left(__x) : _S_right(__x);
          .  	}
 11,627,840        iterator __j = iterator(__y);
  6,976,704        if (__comp)
 35,815,936  	if (__j == begin())
 78,561,280  	  return pair<iterator,bool>(_M_insert(__x, __y, __v), true);
          .  	else
     78,816  	  --__j;
  2,493,568        if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
          .  	return pair<iterator, bool>(_M_insert(__x, __y, __v), true);
  1,246,784        return pair<iterator, bool>(__j, false);
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 27,695,616      _M_insert_unique(iterator __position, const _Val& __v)
          .      {
          .        // end()
 60,007,168        if (__position._M_node == _M_end())
          .  	{
117,965,888  	  if (size() > 0
          .  	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), 
          .  					_KeyOfValue()(__v)))
 64,341,504  	    return _M_insert(0, _M_rightmost(), __v);
          .  	  else
 27,906,816  	    return _M_insert_unique(__v).first;
          .  	}
          .        else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
          .  				      _S_key(__position._M_node)))
          .  	{
          .  	  // First, try before...
          .  	  iterator __before = __position;
          .  	  if (__position._M_node == _M_leftmost()) // begin()
          .  	    return _M_insert(_M_leftmost(), _M_leftmost(), __v);
-- line 1018 ----------------------------------------
-- line 1226 ----------------------------------------
          .  	  _M_insert_equal(end(), *__first);
          .        }
          .  
          .    template<typename _Key, typename _Val, typename _KoV,
          .             typename _Cmp, typename _Alloc>
          .      template<class _II>
          .        void
          .        _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
    373,632        _M_insert_unique(_II __first, _II __last)
          .        {
  1,931,776  	for (; __first != __last; ++__first)
  2,567,040  	  _M_insert_unique(end(), *__first);
          .        }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      inline void
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
          .      erase(iterator __position)
          .      {
-- line 1245 ----------------------------------------
-- line 1276 ----------------------------------------
          .        erase(__p.first, __p.second);
          .        return __old_size - size();
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KoV,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
          .      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    747,264      _M_copy(_Const_Link_type __x, _Link_type __p)
          .      {
          .        // Structural copy.  __x and __p must be non-null.
    747,264        _Link_type __top = _M_clone_node(__x);
    373,632        __top->_M_parent = __p;
          .  
          .        try
          .  	{
    498,176  	  if (__x->_M_right)
    871,808  	    __top->_M_right = _M_copy(_S_right(__x), __top);
 43,292,327  => /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> > const*, std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*)'2 (62272x)
    249,088  	  __p = __top;
    622,720  	  __x = _S_left(__x);
          .  
    558,048  	  while (__x != 0)
          .  	    {
    553,248  	      _Link_type __y = _M_clone_node(__x);
    184,416  	      __p->_M_left = __y;
    184,416  	      __y->_M_parent = __p;
    245,888  	      if (__x->_M_right)
          .  		__y->_M_right = _M_copy(_S_right(__x), __y);
    122,944  	      __p = __y;
    245,888  	      __x = _S_left(__x);
          .  	    }
          .  	}
    498,176        catch(...)
          .  	{
          .  	  _M_erase(__top);
          .  	  __throw_exception_again;
          .  	}
    622,720        return __top;
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      void
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 34,815,520      _M_erase(_Link_type __x)
          .      {
          .        // Erase without rebalancing.
 41,918,240        while (__x != 0)
          .  	{
 32,820,256  	  _M_erase(_S_right(__x));
1,428,060,736  => /usr/include/c++/4.2.1/bits/stl_tree.h:std::_Rb_tree<dai::Var, std::pair<dai::Var const, unsigned long>, std::_Select1st<std::pair<dai::Var const, unsigned long> >, std::less<dai::Var>, std::allocator<std::pair<dai::Var const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<dai::Var const, unsigned long> >*)'2 (2458912x)
 18,754,432  	  _Link_type __y = _S_left(__x);
 23,443,040  	  _M_destroy_node(__x);
 30,266,528  	  __x = __y;
          .  	}
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      void
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
          .      erase(iterator __first, iterator __last)
-- line 1336 ----------------------------------------
-- line 1385 ----------------------------------------
          .  	      || _M_impl._M_key_compare(__k,
          .  					_S_key(__j._M_node))) ? end() : __j;
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 25,346,560      find(const _Key& __k) const
          .      {
 20,277,248        _Const_Link_type __x = _M_begin(); // Current node.
 25,346,560        _Const_Link_type __y = _M_end(); // Last node which is not less than __k.
          .  
 39,343,968       while (__x != 0)
          .         {
136,770,848  	 if (!_M_impl._M_key_compare(_S_key(__x), __k))
 46,662,868  	   __y = __x, __x = _S_left(__x);
          .  	 else
  5,516,880  	   __x = _S_right(__x);
          .         }
 30,415,872       const_iterator __j = const_iterator(__y);
          .       return (__j == end()
          .  	     || _M_impl._M_key_compare(__k, 
167,287,296  				       _S_key(__j._M_node))) ? end() : __j;
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
          .      count(const _Key& __k) const
          .      {
-- line 1416 ----------------------------------------
-- line 1418 ----------------------------------------
          .        const size_type __n = std::distance(__p.first, __p.second);
          .        return __n;
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 22,512,960      lower_bound(const _Key& __k)
          .      {
 18,010,368        _Link_type __x = _M_begin(); // Current node.
 22,512,960        _Link_type __y = _M_end(); // Last node which is not less than __k.
          .  
 20,747,712        while (__x != 0)
 41,026,304  	if (!_M_impl._M_key_compare(_S_key(__x), __k))
          .  	  __y = __x, __x = _S_left(__x);
          .  	else
  9,653,248  	  __x = _S_right(__x);
          .  
 58,533,696        return iterator(__y);
          .      }
          .  
          .    template<typename _Key, typename _Val, typename _KeyOfValue,
          .             typename _Compare, typename _Alloc>
          .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator
          .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
          .      lower_bound(const _Key& __k) const
          .      {
-- line 1445 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_function.h
--------------------------------------------------------------------------------
         Ir 

-- line 95 ----------------------------------------
          .     *
          .     *  @{
          .     */
          .    /**
          .     *  This is one of the @link s20_3_1_base functor base classes@endlink.
          .     */
          .    template <class _Arg, class _Result>
          .      struct unary_function
127,992,945      {
          .        typedef _Arg argument_type;   ///< @c argument_type is the type of the
          .                                      ///     argument (no surprises here)
          .  
          .        typedef _Result result_type;  ///< @c result_type is the return type
          .      };
          .  
          .    /**
          .     *  This is one of the @link s20_3_1_base functor base classes@endlink.
          .     */
          .    template <class _Arg1, class _Arg2, class _Result>
          .      struct binary_function
 12,348,370      {
          .        typedef _Arg1 first_argument_type;   ///< the type of the first argument
          .                                             ///  (no surprises here)
          .  
          .        typedef _Arg2 second_argument_type;  ///< the type of the second argument
          .        typedef _Result result_type;         ///< type of the return type
          .      };
          .    /** @}  */
          .  
-- line 123 ----------------------------------------
-- line 145 ----------------------------------------
          .        _Tp
          .        operator()(const _Tp& __x, const _Tp& __y) const
          .        { return __x - __y; }
          .      };
          .  
          .    /// One of the @link s20_3_2_arithmetic math functors@endlink.
          .    template <class _Tp>
          .      struct multiplies : public binary_function<_Tp, _Tp, _Tp>
     11,980      {
          .        _Tp
    317,350        operator()(const _Tp& __x, const _Tp& __y) const
    698,170        { return __x * __y; }
          .      };
          .  
          .    /// One of the @link s20_3_2_arithmetic math functors@endlink.
          .    template <class _Tp>
          .      struct divides : public binary_function<_Tp, _Tp, _Tp>
          .      {
          .        _Tp
          .        operator()(const _Tp& __x, const _Tp& __y) const
-- line 164 ----------------------------------------
-- line 216 ----------------------------------------
          .        bool
          .        operator()(const _Tp& __x, const _Tp& __y) const
          .        { return __x > __y; }
          .      };
          .  
          .    /// One of the @link s20_3_3_comparisons comparison functors@endlink.
          .    template <class _Tp>
          .      struct less : public binary_function<_Tp, _Tp, bool>
 22,122,240      {
          .        bool
123,372,480        operator()(const _Tp& __x, const _Tp& __y) const
308,431,200        { return __x < __y; }
          .      };
          .  
          .    /// One of the @link s20_3_3_comparisons comparison functors@endlink.
          .    template <class _Tp>
          .      struct greater_equal : public binary_function<_Tp, _Tp, bool>
          .      {
          .        bool
          .        operator()(const _Tp& __x, const _Tp& __y) const
-- line 235 ----------------------------------------
-- line 427 ----------------------------------------
          .      : public unary_function<typename _Operation::first_argument_type,
          .  			    typename _Operation::result_type>
          .      {
          .      protected:
          .        _Operation op;
          .        typename _Operation::second_argument_type value;
          .      public:
          .        binder2nd(const _Operation& __x,
      7,188  		const typename _Operation::second_argument_type& __y)
     11,980        : op(__x), value(__y) {}
          .  
          .        typename _Operation::result_type
      5,990        operator()(const typename _Operation::first_argument_type& __x) const
     19,168        { return op(__x, value); }
          .  
          .        // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .        // 109.  Missing binders for non-const sequence elements
          .        typename _Operation::result_type
    167,600        operator()(typename _Operation::first_argument_type& __x) const
    536,320        { return op(__x, value); }
          .      };
          .  
          .    /// One of the @link s20_3_6_binder binder functors@endlink.
          .    template <class _Operation, class _Tp>
          .      inline binder2nd<_Operation>
      5,990      bind2nd(const _Operation& __fn, const _Tp& __x)
          .      {
          .        typedef typename _Operation::second_argument_type _Arg2_type;
     25,158        return binder2nd<_Operation>(__fn, _Arg2_type(__x));
          .      }
          .    /** @}  */
          .  
          .    // 20.3.7 adaptors pointers functions
          .    /** @defgroup s20_3_7_adaptors Adaptors for pointers to functions
          .     *  The advantage of function objects over pointers to functions is that
          .     *  the objects in the standard library declare nested typedefs describing
          .     *  their argument and result types with uniform names (e.g., @c result_type
-- line 463 ----------------------------------------
-- line 536 ----------------------------------------
          .        const _Tp&
          .        operator()(const _Tp& __x) const
          .        { return __x; }
          .      };
          .  
          .    template <class _Pair>
          .      struct _Select1st : public unary_function<_Pair,
          .  					      typename _Pair::first_type>
255,961,920      {
          .        typename _Pair::first_type&
          .        operator()(_Pair& __x) const
          .        { return __x.first; }
          .  
          .        const typename _Pair::first_type&
102,384,768        operator()(const _Pair& __x) const
179,173,344        { return __x.first; }
          .      };
          .  
          .    template <class _Pair>
          .      struct _Select2nd : public unary_function<_Pair,
          .  					      typename _Pair::second_type>
          .      {
          .        typename _Pair::second_type&
          .        operator()(_Pair& __x) const
-- line 559 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/factor.h
--------------------------------------------------------------------------------
         Ir 

-- line 9 ----------------------------------------
          .  #include <dai/varset.h>
          .  #include <dai/index.h>
          .  #include <dai/util.h>
          .  #include <dai/spvector.h>
          .  
          .  namespace dai {
          .  
          .  template <typename T, typename spvector_type>
    307,314  class TFactor {
          .  private:
          .  	VarSet _vs;
          .  	TProb<T,spvector_type> _p;
          .  public:
          .  
          .  
     25,158  	TFactor ( T p = 1) : _vs(), _p(1,p) {}
          .  
          .  	TFactor( const Var &v ) : _vs(v), _p(v.states()) {}
          .  
     19,168  	TFactor( const VarSet& vars ) : _vs(vars), _p() {
     45,524  		_p = TProb<T,spvector_type>( BigInt_size_t( _vs.nrStates() ) );
          .  	}
          .  
     40,732  	TFactor( const VarSet& vars, T p ) : _vs(vars), _p() {
     93,444  		_p = TProb<T,spvector_type>( BigInt_size_t( _vs.nrStates() ), p );
          .  	}
          .  
          .  
          .  	template<typename S>
          .  	TFactor( const VarSet& vars, const std::vector<S> &x ) : _vs(vars), _p() {
          .  		DAI_ASSERT( x.size() == vars.nrStates() );
          .  		_p = TProb<T,spvector_type>( x.begin(), x.end(), x.size() );
          .  	}
-- line 41 ----------------------------------------
-- line 57 ----------------------------------------
          .  		DAI_ASSERT( nrStates == p.size() );
          .  		Permute permindex(vars);
          .  		for( size_t li = 0; li < p.size(); ++li )
          .  			_p.set( permindex.convertLinearIndex(li), p[li] );
          .  	}
          .  
          .  
          .  
  2,117,248  	void set( size_t i, T val ) { _p.set( i, val ); }
          .  
          .  	T get( size_t i ) const { return _p[i]; }
          .  
          .  
          .  
 28,946,616  	const TProb<T,spvector_type>& p() const { return _p; }
          .  
     28,752  	TProb<T,spvector_type>& p() { return _p; }
          .  
  1,183,168  	T operator[] (size_t i) const { return _p[i]; }
          .  
 21,607,340  	const VarSet& vars() const { return _vs; }
          .  
          .  	VarSet& vars() { return _vs; }
          .  
          .  
          .  	size_t nrStates() const { return _p.size(); }
          .  
          .  	T entropy() const { return _p.entropy(); }
          .  
-- line 85 ----------------------------------------
-- line 162 ----------------------------------------
          .  	TFactor<T,spvector_type>& takeAbs() { _p.takeAbs(); return *this; }
          .  
          .  	TFactor<T,spvector_type>& takeExp() { _p.takeExp(); return *this; }
          .  
          .  
          .  	TFactor<T,spvector_type>& takeLog( bool zero = false ) { _p.takeLog(zero); return *this; }
          .  
          .  
     22,781  	T normalize( ProbNormType norm=NORMPROB ) { return _p.normalize( norm ); }
          .  
          .  
          .  
     11,381  	TFactor<T,spvector_type>& fill (T x) { _p.fill( x ); return *this; }
          .  
          .  	TFactor<T,spvector_type>& operator+= (T x) { _p += x; return *this; }
          .  
          .  	TFactor<T,spvector_type>& operator-= (T x) { _p -= x; return *this; }
          .  
          .  	TFactor<T,spvector_type>& operator*= (T x) { _p *= x; return *this; }
          .  
          .  	TFactor<T,spvector_type>& operator/= (T x) { _p /= x; return *this; }
-- line 182 ----------------------------------------
-- line 250 ----------------------------------------
          .  
          .  
          .  	TFactor<T,spvector_type>& operator+= (const TFactor<T,spvector_type>& g) { return binaryOp( g, std::plus<T>() ); }
          .  
          .  
          .  	TFactor<T,spvector_type>& operator-= (const TFactor<T,spvector_type>& g) { return binaryOp( g, std::minus<T>() ); }
          .  
          .  
      5,990  	TFactor<T,spvector_type>& operator*= (const TFactor<T,spvector_type>& g) {
          .  		// Note that the following implementation is slow, because it doesn't exploit the special case of value 0
          .  		// return binaryOp( g, std::multiplies<T>() );
     11,980  		if( _vs == g._vs ) // optimize special case
          .  			_p.pwBinaryOp( g._p, std::multiplies<T>() );
          .  		else
     61,098  			*this = pointwiseOp( *this, g, std::multiplies<T>(), p().def() == (T)0 && g.p().def() == (T)0);
      9,584  		return *this;
          .  	}
          .  
          .  
          .  	TFactor<T,spvector_type>& operator/= (const TFactor<T,spvector_type>& g) { return binaryOp( g, fo_divides0<T>() ); }
          .  
      8,386  	template<typename binOp> TFactor<T,spvector_type> binaryTr( const TFactor<T,spvector_type> &g, binOp op ) const {
          .  		// OPTIMIZE ME
     17,970  		return pointwiseOp( *this, g, op );
          .  		// Note that to prevent a copy to be made, it is crucial
          .  		// that the result is declared outside the if-else construct.
          .  		/* TFactor<T,spvector_type> result;
          .    if( _vs == g._vs ) { // optimize special case
          .    result._vs = _vs;
          .    result._p = _p.pwBinaryTr( g._p, op );
          .   } else {
          .    result._vs = _vs | g._vs;
-- line 281 ----------------------------------------
-- line 303 ----------------------------------------
          .  	}
          .  
          .  
          .  	TFactor<T,spvector_type> operator* (const TFactor<T,spvector_type>& g) const {
          .  		return pointwiseOp( *this, g, std::multiplies<T>(), p().def() == (T)0 && g.p().def() == (T)0);
          .  	}
          .  
          .  
      8,386  	TFactor<T,spvector_type> operator/ (const TFactor<T,spvector_type>& g) const {
     22,762  		return binaryTr(g,fo_divides0<T>());
          .  	}
          .  
          .  
          .  
          .  
          .  	TFactor<T,spvector_type> slice( const VarSet& vars, size_t varsState ) const;
          .  
          .  
-- line 320 ----------------------------------------
-- line 358 ----------------------------------------
          .    std::cerr << res << std::endl;
          .    DAI_ASSERT( ((result.p() <= res.p()) && (res.p() <= result.p())) );
          .    }*/
          .  
          .  	return result;
          .  }
          .  
          .  
     10,782  template<typename T, typename spvector_type> TFactor<T,spvector_type> TFactor<T,spvector_type>::marginal(const VarSet &vars, bool normed) const {
     20,366  	VarSet res_vars = vars & _vs;
          .  
     19,168  	DAI_ASSERT( !isnan(p().def()) );
     69,484  => /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/src/util.cpp:dai::isnan(double) (1198x)
          .  
     22,762  	VarSet rem(_vs / res_vars);
          .  
     39,534  	TFactor<T,spvector_type> result( res_vars, rem.nrStates().get_d() * p().def() );
          .  
  2,534,008  	for( typename TProb<T,spvector_type>::const_iterator it = p().begin(); it != p().end(); it++ ) {
  1,307,712  		State s(_vs, it->first);
  1,183,168  		size_t res_vars_s = BigInt_size_t( s( res_vars) );
  1,992,704  		result.set( res_vars_s, result[res_vars_s] - p().def() + it->second );
          .  	}
          .  
          .  	/* SLOW BECAUSE IT ITERATES OVER ALL VALUES
          .    TFactor<T,spvector_type> res( res_vars, 0.);
          .    IndexFor i_res( res_vars, _vs );
          .    for( size_t i = 0; i < _p.size(); i++, ++i_res )
          .    res.set( i_res, res[i_res] + _p[i] );
          .  
          .    if( !((result.p() <= res.p()) && (res.p() <= result.p())) ) {
          .    std::cerr << result << std::endl;
          .    std::cerr << res << std::endl;
          .    DAI_ASSERT( ((result.p() <= res.p()) && (res.p() <= result.p())) );
          .    }
          .  	 */
          .  
      3,594  	if( normed )
      3,594  		result.normalize( NORMPROB );
          .  
     15,574  	return result;
          .  }
          .  
          .  
          .  template<typename T, typename spvector_type> TFactor<T,spvector_type> TFactor<T,spvector_type>::maxMarginal(const VarSet &vars, bool normed) const {
          .  	VarSet res_vars = vars & _vs;
          .  
          .  	VarSet rem(_vs / res_vars);
          .  	TFactor<T,spvector_type> result( res_vars, p().def() );
-- line 405 ----------------------------------------
-- line 452 ----------------------------------------
          .  							T f2 = slice( ij, alpha2 * as + beta2 * bs ).p().divide( slice( ij, alpha1 * as + beta2 * bs ).p() ).max();
          .  							T f = f1 * f2;
          .  							if( f > max )
          .  								max = f;
          .  						}
          .  }
          .  
          .  
     28,752  template<typename T, typename spvector_type, typename binaryOp> TFactor<T,spvector_type> pointwiseOp( const TFactor<T,spvector_type> &f, const TFactor<T,spvector_type> &g, binaryOp op, bool fast=true ) {
     40,732  	if( f.vars() == g.vars() ) { // optimizate special case
      8,386  		TFactor<T,spvector_type> result( f.vars() );
     34,742  		result.p() = f.p().pwBinaryTr( g.p(), op );
     19,168  		return result;
          .  	} else {
          .  		// Union of variables
     25,158  		VarSet un( f.vars() | g.vars() );
          .  		// Intersection of variables
     29,950  		VarSet is( f.vars() & g.vars() );
          .  		// Result factor
     35,940  		TFactor<T,spvector_type> result( un, op( f.p().def(), g.p().def() ) );
          .  
      3,594  		if( fast ) {
          .  			// For all non-default states of f and all non-default states of g
  2,535,206  			for( typename TProb<T,spvector_type>::const_iterator fit = f.p().begin(); fit != f.p().end(); fit++ ) {
          .  				// calculate state of f
  1,432,256  				State fs( f.vars(), fit->first );
 85,748,992  				for( typename TProb<T,spvector_type>::const_iterator git = g.p().begin(); git != g.p().end(); git++ ) {
          .  					// calculate state of g
 48,016,640  					State gs( g.vars(), git->first );
          .  					// check whether these states are compatible
  2,087,680  					bool compatible = true;
221,209,856  					for( typename VarSet::const_iterator v = is.begin(); v != is.end() && compatible; v++ )
 61,883,136  						if( fs(*v) != gs(*v) )
  2,025,408  							compatible = false;
  6,263,040  					if( compatible ) {
    373,632  						State fgs = fs;
  1,556,800  						fgs.insert( gs.begin(), gs.end() );
  2,739,968  						result.set( BigInt_size_t(fgs(un)), op( fit->second, git->second ) );
          .  					}
          .  				}
          .  			}
          .  		} else {
          .  			// For all non-default states of f and all states of g
          .  			for( typename TProb<T,spvector_type>::const_iterator fit = f.p().begin(); fit != f.p().end(); fit++ ) {
          .  				State fs( f.vars(), fit->first );
          .  				for( State g_minus_f_s(g.vars() / f.vars()); g_minus_f_s.valid(); g_minus_f_s++ ) {
-- line 497 ----------------------------------------
-- line 521 ----------------------------------------
          .  0
          .   if( !((result.p() <= resultold.p()) && (resultold.p() <= result.p())) ) {
          .   std::cerr << result << std::endl;
          .    std::cerr << resultold << std::endl;
          .    DAI_ASSERT( ((result.p() <= resultold.p()) && (resultold.p() <= result.p())) );
          .    }
          .  		 */
          .  
     26,356  		return result;
          .  	}
          .  }
          .  
          .  
          .  
          .  template<typename T, typename spvector_type> std::ostream& operator<< (std::ostream& os, const TFactor<T,spvector_type>& f) {
          .  	// os << "(" << f.vars() << ", " << f.p() << ")";
          .  	os << "(" << f.vars() << ", (";
-- line 537 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/ext/new_allocator.h
--------------------------------------------------------------------------------
         Ir 

-- line 60 ----------------------------------------
          .        typedef _Tp&       reference;
          .        typedef const _Tp& const_reference;
          .        typedef _Tp        value_type;
          .  
          .        template<typename _Tp1>
          .          struct rebind
          .          { typedef new_allocator<_Tp1> other; };
          .  
 69,397,550        new_allocator() throw() { }
          .  
 18,820,590        new_allocator(const new_allocator&) throw() { }
          .  
          .        template<typename _Tp1>
          .          new_allocator(const new_allocator<_Tp1>&) throw() { }
          .  
 85,081,375        ~new_allocator() throw() { }
          .  
          .        pointer
          .        address(reference __x) const { return &__x; }
          .  
          .        const_pointer
          .        address(const_reference __x) const { return &__x; }
          .  
          .        // NB: __n is permitted to be 0.  The C++ standard says nothing
          .        // about what the return value is when __n == 0.
          .        pointer
 29,534,016        allocate(size_type __n, const void* = 0)
          .        { 
 73,835,040  	if (__builtin_expect(__n > this->max_size(), false))
          .  	  std::__throw_bad_alloc();
          .  
 59,068,032  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
          .        }
          .  
          .        // __p is not permitted to be a null pointer.
          .        void
 29,530,422        deallocate(pointer __p, size_type)
 29,530,422        { ::operator delete(__p); }
          .  
          .        size_type
 15,416,079        max_size() const throw() 
 46,248,237        { return size_t(-1) / sizeof(_Tp); }
          .  
          .        // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .        // 402. wrong new expression in [some_] allocator::construct
          .        void 
 30,076,320        construct(pointer __p, const _Tp& __val) 
114,644,336        { ::new(__p) _Tp(__val); }
          .  
          .        void 
 51,574,688        destroy(pointer __p) { __p->~_Tp(); }
          .      };
          .  
          .    template<typename _Tp>
          .      inline bool
          .      operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
          .      { return true; }
          .    
          .    template<typename _Tp>
-- line 118 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /opt/local/include/gmpxx.h
--------------------------------------------------------------------------------
         Ir 

-- line 63 ----------------------------------------
          .  
          .  struct __gmp_unary_com
          .  {
          .    static void eval(mpz_ptr z, mpz_srcptr w) { mpz_com(z, w); }
          .  };
          .  
          .  struct __gmp_binary_plus
          .  {
  2,912,256    static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  4,368,384    { mpz_add(z, w, v); }
          .  
          .    static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
          .    { mpz_add_ui(z, w, l); }
          .    static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
          .    { mpz_add_ui(z, w, l); }
          .    static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
          .    {
          .      if (l >= 0)
-- line 80 ----------------------------------------
-- line 311 ----------------------------------------
          .      mpf_set_d(temp, d);
          .      mpf_sub(f, temp, g);
          .      mpf_clear(temp);
          .    }
          .  };
          .  
          .  struct __gmp_binary_multiplies
          .  {
  5,877,216    static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
  8,815,824    { mpz_mul(z, w, v); }
          .  
          .    static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
          .    { mpz_mul_ui(z, w, l); }
          .    static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
          .    { mpz_mul_ui(z, w, l); }
          .    static void eval(mpz_ptr z, mpz_srcptr w, signed long int l)
          .    { mpz_mul_si (z, w, l); }
          .    static void eval(mpz_ptr z, signed long int l, mpz_srcptr w)
-- line 328 ----------------------------------------
-- line 436 ----------------------------------------
          .      mpf_set_d(temp, d);
          .      mpf_mul(f, temp, g);
          .      mpf_clear(temp);
          .    }
          .  };
          .  
          .  struct __gmp_binary_divides
          .  {
 26,298,240    static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
 39,447,360    { mpz_tdiv_q(z, w, v); }
          .  
          .    static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
          .    { mpz_tdiv_q_ui(z, w, l); }
          .    static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
          .    {
          .      if (mpz_sgn(w) >= 0)
          .        {
          .  	if (mpz_fits_ulong_p(w))
-- line 453 ----------------------------------------
-- line 597 ----------------------------------------
          .      mpf_set_d(temp, d);
          .      mpf_div(f, temp, g);
          .      mpf_clear(temp);
          .    }
          .  };
          .  
          .  struct __gmp_binary_modulus
          .  {
 26,298,240    static void eval(mpz_ptr z, mpz_srcptr w, mpz_srcptr v)
 39,447,360    { mpz_tdiv_r(z, w, v); }
          .  
          .    static void eval(mpz_ptr z, mpz_srcptr w, unsigned long int l)
          .    { mpz_tdiv_r_ui(z, w, l); }
          .    static void eval(mpz_ptr z, unsigned long int l, mpz_srcptr w)
          .    {
          .      if (mpz_sgn(w) >= 0)
          .        {
          .  	if (mpz_fits_ulong_p(w))
-- line 614 ----------------------------------------
-- line 757 ----------------------------------------
          .  struct __gmp_binary_equal
          .  {
          .    static bool eval(mpz_srcptr z, mpz_srcptr w) { return mpz_cmp(z, w) == 0; }
          .  
          .    static bool eval(mpz_srcptr z, unsigned long int l)
          .    { return mpz_cmp_ui(z, l) == 0; }
          .    static bool eval(unsigned long int l, mpz_srcptr z)
          .    { return mpz_cmp_ui(z, l) == 0; }
 21,800,350    static bool eval(mpz_srcptr z, signed long int l)
 78,481,260    { return mpz_cmp_si(z, l) == 0; }
          .    static bool eval(signed long int l, mpz_srcptr z)
          .    { return mpz_cmp_si(z, l) == 0; }
          .    static bool eval(mpz_srcptr z, double d)
          .    { return mpz_cmp_d(z, d) == 0; }
          .    static bool eval(double d, mpz_srcptr z)
          .    { return mpz_cmp_d(z, d) == 0; }
          .  
          .    static bool eval(mpq_srcptr q, mpq_srcptr r)
-- line 774 ----------------------------------------
-- line 945 ----------------------------------------
          .    static bool eval(mpf_srcptr f, double d)
          .    { return mpf_cmp_d(f, d) < 0; }
          .    static bool eval(double d, mpf_srcptr f)
          .    { return mpf_cmp_d(f, d) > 0; }
          .  };
          .  
          .  struct __gmp_binary_less_equal
          .  {
103,757,094    static bool eval(mpz_srcptr z, mpz_srcptr w) { return mpz_cmp(z, w) <= 0; }
          .  
          .    static bool eval(mpz_srcptr z, unsigned long int l)
          .    { return mpz_cmp_ui(z, l) <= 0; }
          .    static bool eval(unsigned long int l, mpz_srcptr z)
          .    { return mpz_cmp_ui(z, l) >= 0; }
          .    static bool eval(mpz_srcptr z, signed long int l)
          .    { return mpz_cmp_si(z, l) <= 0; }
          .    static bool eval(signed long int l, mpz_srcptr z)
-- line 961 ----------------------------------------
-- line 1475 ----------------------------------------
          .  };
          .  
          .  template <class T, class U, class Op>
          .  struct __gmp_binary_expr
          .  {
          .    typename __gmp_resolve_ref<T>::ref_type val1;
          .    typename __gmp_resolve_ref<U>::ref_type val2;
          .  
133,002,896    __gmp_binary_expr(const T &v1, const U &v2) : val1(v1), val2(v2) { }
          .  private:
          .    __gmp_binary_expr();
          .  };
          .  
          .  
          .  // functions for evaluating expressions
          .  template <class T, class U>
          .  void __gmp_set_expr(mpz_ptr, const __gmp_expr<T, U> &);
-- line 1491 ----------------------------------------
-- line 1537 ----------------------------------------
          .    typedef mpz_t value_type;
          .    value_type mp;
          .  public:
          .    mp_bitcnt_t get_prec() const { return mpf_get_default_prec(); }
          .  
          .    // constructors and destructor
          .    __gmp_expr() { mpz_init(mp); }
          .  
 29,568,448    __gmp_expr(const __gmp_expr &z) { mpz_init_set(mp, z.mp); }
          .    template <class T, class U>
 24,342,080    __gmp_expr(const __gmp_expr<T, U> &expr)
 53,552,576    { mpz_init(mp); __gmp_set_expr(mp, expr); }
          .  
          .    __gmp_expr(signed char c) { mpz_init_set_si(mp, c); }
          .    __gmp_expr(unsigned char c) { mpz_init_set_ui(mp, c); }
          .  
  5,676,360    __gmp_expr(signed int i) { mpz_init_set_si(mp, i); }
          .    __gmp_expr(unsigned int i) { mpz_init_set_ui(mp, i); }
          .  
          .    __gmp_expr(signed short int s) { mpz_init_set_si(mp, s); }
          .    __gmp_expr(unsigned short int s) { mpz_init_set_ui(mp, s); }
          .  
          .    __gmp_expr(signed long int l) { mpz_init_set_si(mp, l); }
214,097,234    __gmp_expr(unsigned long int l) { mpz_init_set_ui(mp, l); }
          .  
          .    __gmp_expr(float f) { mpz_init_set_d(mp, f); }
          .    __gmp_expr(double d) { mpz_init_set_d(mp, d); }
          .    // __gmp_expr(long double ld) { mpz_init_set_d(mp, ld); }
          .  
          .    explicit __gmp_expr(const char *s)
          .    {
          .      if (mpz_init_set_str (mp, s, 0) != 0)
-- line 1568 ----------------------------------------
-- line 1593 ----------------------------------------
          .        {
          .          mpz_clear (mp);
          .          throw std::invalid_argument ("mpz_set_str");
          .        }
          .    }
          .  
          .    explicit __gmp_expr(mpz_srcptr z) { mpz_init_set(mp, z); }
          .  
239,903,540    ~__gmp_expr() { mpz_clear(mp); }
          .  
          .    // assignment operators
    311,360    __gmp_expr & operator=(const __gmp_expr &z)
    809,536    { mpz_set(mp, z.mp); return *this; }
          .    template <class T, class U>
          .    __gmp_expr<value_type, value_type> & operator=(const __gmp_expr<T, U> &expr)
          .    { __gmp_set_expr(mp, expr); return *this; }
          .  
          .    __gmp_expr & operator=(signed char c) { mpz_set_si(mp, c); return *this; }
          .    __gmp_expr & operator=(unsigned char c) { mpz_set_ui(mp, c); return *this; }
          .  
  1,245,440    __gmp_expr & operator=(signed int i) { mpz_set_si(mp, i); return *this; }
          .    __gmp_expr & operator=(unsigned int i) { mpz_set_ui(mp, i); return *this; }
          .  
          .    __gmp_expr & operator=(signed short int s)
          .    { mpz_set_si(mp, s); return *this; }
          .    __gmp_expr & operator=(unsigned short int s)
          .    { mpz_set_ui(mp, s); return *this; }
          .  
          .    __gmp_expr & operator=(signed long int l)
-- line 1621 ----------------------------------------
-- line 1648 ----------------------------------------
          .    { return mpz_set_str(mp, s.c_str(), base); }
          .    std::string get_str(int base = 10) const
          .    {
          .      __gmp_alloc_cstring temp(mpz_get_str(0, base, mp));
          .      return std::string(temp.str);
          .    }
          .  
          .    // conversion functions
333,590,340    mpz_srcptr __get_mp() const { return mp; }
  4,853,760    mpz_ptr __get_mp() { return mp; }
          .    mpz_srcptr get_mpz_t() const { return mp; }
          .    mpz_ptr get_mpz_t() { return mp; }
          .  
          .    signed long int get_si() const { return mpz_get_si(mp); }
 63,156,492    unsigned long int get_ui() const { return mpz_get_ui(mp); }
     16,772    double get_d() const { return mpz_get_d(mp); }
          .  
          .    // bool fits_schar_p() const { return mpz_fits_schar_p(mp); }
          .    // bool fits_uchar_p() const { return mpz_fits_uchar_p(mp); }
          .    bool fits_sint_p() const { return mpz_fits_sint_p(mp); }
          .    bool fits_uint_p() const { return mpz_fits_uint_p(mp); }
          .    bool fits_sshort_p() const { return mpz_fits_sshort_p(mp); }
          .    bool fits_ushort_p() const { return mpz_fits_ushort_p(mp); }
          .    bool fits_slong_p() const { return mpz_fits_slong_p(mp); }
-- line 1671 ----------------------------------------
-- line 2112 ----------------------------------------
          .  
          .  template <>
          .  inline void __gmp_set_expr(mpz_ptr z, const mpz_class &w)
          .  {
          .    mpz_set(z, w.get_mpz_t());
          .  }
          .  
          .  template <class T>
 51,154,960  inline void __gmp_set_expr(mpz_ptr z, const __gmp_expr<mpz_t, T> &expr)
          .  {
 91,593,552    expr.eval(z);
          .  }
          .  
          .  template <>
          .  inline void __gmp_set_expr(mpz_ptr z, const mpq_class &q)
          .  {
          .    mpz_set_q(z, q.get_mpq_t());
          .  }
          .  
-- line 2130 ----------------------------------------
-- line 2299 ----------------------------------------
          .  <T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, T>, Op> >
          .  {
          .  private:
          .    typedef __gmp_expr<T, T> val1_type;
          .    typedef __gmp_expr<T, T> val2_type;
          .  
          .    __gmp_binary_expr<val1_type, val2_type, Op> expr;
          .  public:
 58,473,696    __gmp_expr(const val1_type &val1, const val2_type &val2)
 87,710,544      : expr(val1, val2) { }
          .    void eval(typename __gmp_resolve_expr<T>::ptr_type p,
 58,473,696  	    unsigned long int = 0) const
165,675,472    { Op::eval(p, expr.val1.__get_mp(), expr.val2.__get_mp()); }
          .    const val1_type & get_val1() const { return expr.val1; }
          .    const val2_type & get_val2() const { return expr.val2; }
          .    unsigned long int get_prec() const
          .    {
          .      mp_bitcnt_t prec1 = expr.val1.get_prec(),
          .        prec2 = expr.val2.get_prec();
          .      return (prec1 > prec2) ? prec1 : prec2;
          .    }
-- line 2319 ----------------------------------------
-- line 2434 ----------------------------------------
          .  <T, __gmp_binary_expr<__gmp_expr<T, T>, __gmp_expr<T, U>, Op> >
          .  {
          .  private:
          .    typedef __gmp_expr<T, T> val1_type;
          .    typedef __gmp_expr<T, U> val2_type;
          .  
          .    __gmp_binary_expr<val1_type, val2_type, Op> expr;
          .  public:
  2,912,256    __gmp_expr(const val1_type &val1, const val2_type &val2)
  4,368,384      : expr(val1, val2) { }
  2,426,880    void eval(typename __gmp_resolve_expr<T>::ptr_type p) const
          .    {
  3,883,008      __gmp_expr<T, T> temp(expr.val2);
  9,222,144      Op::eval(p, expr.val1.__get_mp(), temp.__get_mp());
          .    }
          .    void eval(typename __gmp_resolve_expr<T>::ptr_type p,
          .  	    mp_bitcnt_t prec) const
          .    {
          .      __gmp_expr<T, T> temp(expr.val2, prec);
          .      Op::eval(p, expr.val1.__get_mp(), temp.__get_mp());
          .    }
          .    const val1_type & get_val1() const { return expr.val1; }
-- line 2455 ----------------------------------------
-- line 3130 ----------------------------------------
          .  // non-member operators and functions
          .  
          .  __GMP_DEFINE_UNARY_FUNCTION(operator+, __gmp_unary_plus)
          .  __GMP_DEFINE_UNARY_FUNCTION(operator-, __gmp_unary_minus)
          .  __GMP_DEFINE_UNARY_FUNCTION(operator~, __gmp_unary_com)
          .  
          .  __GMP_DEFINE_BINARY_FUNCTION(operator+, __gmp_binary_plus)
          .  __GMP_DEFINE_BINARY_FUNCTION(operator-, __gmp_binary_minus)
 12,619,776  __GMP_DEFINE_BINARY_FUNCTION(operator*, __gmp_binary_multiplies)
          .  __GMP_DEFINE_BINARY_FUNCTION(operator/, __gmp_binary_divides)
113,959,040  __GMP_DEFINE_BINARY_FUNCTION(operator%, __gmp_binary_modulus)
          .  __GMP_DEFINE_BINARY_FUNCTION(operator&, __gmp_binary_and)
          .  __GMP_DEFINE_BINARY_FUNCTION(operator|, __gmp_binary_ior)
          .  __GMP_DEFINE_BINARY_FUNCTION(operator^, __gmp_binary_xor)
          .  
          .  __GMP_DEFINE_BINARY_FUNCTION_UI(operator<<, __gmp_binary_lshift)
          .  __GMP_DEFINE_BINARY_FUNCTION_UI(operator>>, __gmp_binary_rshift)
          .  
117,721,890  __GMP_DEFINE_BINARY_TYPE_FUNCTION(bool, operator==, __gmp_binary_equal)
          .  __GMP_DEFINE_BINARY_TYPE_FUNCTION(bool, operator!=, __gmp_binary_not_equal)
          .  __GMP_DEFINE_BINARY_TYPE_FUNCTION(bool, operator<, __gmp_binary_less)
130,824,162  __GMP_DEFINE_BINARY_TYPE_FUNCTION(bool, operator<=, __gmp_binary_less_equal)
          .  __GMP_DEFINE_BINARY_TYPE_FUNCTION(bool, operator>, __gmp_binary_greater)
          .  __GMP_DEFINE_BINARY_TYPE_FUNCTION(bool, operator>=, \
          .                                    __gmp_binary_greater_equal)
          .  
          .  __GMP_DEFINE_UNARY_FUNCTION(abs, __gmp_abs_function)
          .  __GMP_DEFINE_UNARY_FUNCTION(trunc, __gmp_trunc_function)
          .  __GMP_DEFINE_UNARY_FUNCTION(floor, __gmp_floor_function)
          .  __GMP_DEFINE_UNARY_FUNCTION(ceil, __gmp_ceil_function)
-- line 3159 ----------------------------------------
-- line 3160 ----------------------------------------
          .  __GMP_DEFINE_UNARY_FUNCTION(sqrt, __gmp_sqrt_function)
          .  __GMP_DEFINE_BINARY_FUNCTION(hypot, __gmp_hypot_function)
          .  
          .  __GMP_DEFINE_UNARY_TYPE_FUNCTION(int, sgn, __gmp_sgn_function)
          .  __GMP_DEFINE_BINARY_TYPE_FUNCTION(int, cmp, __gmp_cmp_function)
          .  
          .  // member operators for mpz_class
          .  
 12,134,400  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator+=, __gmp_binary_plus)
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator-=, __gmp_binary_minus)
 12,354,000  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator*=, __gmp_binary_multiplies)
109,576,000  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator/=, __gmp_binary_divides)
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator%=, __gmp_binary_modulus)
          .  
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator&=, __gmp_binary_and)
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator|=, __gmp_binary_ior)
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR(operator^=, __gmp_binary_xor)
          .  
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR_UI(operator<<=, __gmp_binary_lshift)
          .  __GMPZ_DEFINE_COMPOUND_OPERATOR_UI(operator>>=, __gmp_binary_rshift)
-- line 3179 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/allocator.h
--------------------------------------------------------------------------------
         Ir 

-- line 92 ----------------------------------------
          .        typedef _Tp&       reference;
          .        typedef const _Tp& const_reference;
          .        typedef _Tp        value_type;
          .  
          .        template<typename _Tp1>
          .          struct rebind
          .          { typedef allocator<_Tp1> other; };
          .  
 22,900,700        allocator() throw() { }
          .  
 15,683,825        allocator(const allocator& __a) throw()
 25,094,120        : __glibcxx_base_allocator<_Tp>(__a) { }
          .  
          .        template<typename _Tp1>
127,483,840          allocator(const allocator<_Tp1>&) throw() { }
          .  
170,162,750        ~allocator() throw() { }
          .  
          .        // Inherit everything else.
          .      };
          .  
          .    template<typename _T1, typename _T2>
          .      inline bool
          .      operator==(const allocator<_T1>&, const allocator<_T2>&)
          .      { return true; }
-- line 116 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/index.h
--------------------------------------------------------------------------------
         Ir 

-- line 344 ----------------------------------------
          .   *
          .   *  \note A State is very similar to a dai::multifor, but tailored for Var 's and VarSet 's.
          .   *
          .   *  \see dai::calcLinearState(), dai::calcState()
          .   *
          .   *  \idea Make the State class a more prominent part of libDAI (and document it clearly, explaining the concept of state); 
          .   *  add more optimized variants of the State class like IndexFor (e.g. for TFactor<>::slice()).
          .   */
 44,709,952  class State {
          .      private:
          .          /// Type for representing a joint state of some variables as a map, which maps each variable to its state
          .          typedef std::map<Var, size_t> states_type;
          .  
          .          /// Current state (represented linearly)
          .          BigInt                        state;
          .  
          .          /// Current state (represented as a map)
          .          states_type                   states;
          .  
          .      public:
          .          /// Default constructor
          .          State() : state(0), states() {}
          .  
          .          /// Construct from VarSet \a vs and corresponding linear state \a linearState
 42,032,256          State( const VarSet &vs, BigInt linearState=0 ) : state(linearState), states() {
 22,122,240              if( linearState == 0 )
  6,069,690                  for( VarSet::const_iterator v = vs.begin(); v != vs.end(); v++ )
  1,554,176                      states[*v] = 0;
          .              else {
213,371,392                  for( VarSet::const_iterator v = vs.begin(); v != vs.end(); v++ ) {
249,833,280                      states[*v] = BigInt_size_t( linearState % (BigInt)v->states() );
 92,043,840                      linearState /= (BigInt)v->states();
          .                  }
 25,774,152                  DAI_ASSERT( linearState == 0 );
          .              }
  8,848,896          }
          .  
          .          /// Construct from a std::map<Var, size_t>
          .          State( const std::map<Var, size_t> &s ) : state(0), states() {
          .              insert( s.begin(), s.end() );
          .          }
          .  
          .          /// Constant iterator over the values
          .          typedef states_type::const_iterator const_iterator;
          .  
          .          /// Returns constant iterator that points to the first item
  2,241,792          const_iterator begin() const { return states.begin(); }
          .  
          .          /// Returns constant iterator that points beyond the last item
  5,590,080          const_iterator end() const { return states.end(); }
          .  
          .          /// Return current linear state
          .          operator size_t() const {
          .              DAI_ASSERT( valid() );
          .              return( BigInt_size_t( state ) );
          .          }
          .  
          .          /// Inserts a range of variable-state pairs, changing the current state
          .          template<typename InputIterator>
    373,632          void insert( InputIterator b, InputIterator e ) {
    498,176              states.insert( b, e );
    186,816              VarSet vars;
  7,386,368              for( const_iterator it = begin(); it != end(); it++ )
  1,488,128                  vars |= it->first;
    373,632              state = 0;
  1,556,800              state = this->operator()( vars );
          .          }
          .  
          .          /// Return current state represented as a map
          .          const std::map<Var,size_t>& get() const { return states; }
          .  
          .          /// Cast into std::map<Var, size_t>
          .          operator const std::map<Var,size_t>& () const { return states; }
          .  
          .          /// Return current state of variable \a v, or 0 if \a v is not in \c *this
 22,919,680          size_t operator() ( const Var &v ) const {
 50,423,296              states_type::const_iterator entry = states.find( v );
 82,510,848              if( entry == states.end() )
 27,503,616                  return 0;
          .              else
 22,919,680                  return entry->second;
          .          }
          .  
          .          /// Return linear state of variables in \a vs, assuming that variables that are not in \c *this are in state 0
  1,681,344          BigInt operator() ( const VarSet &vs ) const {
    934,080              BigInt vs_state = 0;
  1,120,896              BigInt prod = 1;
 21,995,520              for( VarSet::const_iterator v = vs.begin(); v != vs.end(); v++ ) {
  7,280,640                  states_type::const_iterator entry = states.find( *v );
 10,192,896                  if( entry != states.end() )
 15,532,032                      vs_state += (BigInt)entry->second * prod;
 10,192,896                  prod *= (BigInt)v->states();
          .              }
  1,868,160              return vs_state;
          .          }
          .  
          .          /// Increments the current state (prefix)
          .          void operator++( ) {
          .              if( valid() ) {
          .                  state++;
          .                  states_type::iterator entry = states.begin();
          .                  while( entry != states.end() ) {
-- line 445 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/spvector.h
--------------------------------------------------------------------------------
        Ir 

-- line 4 ----------------------------------------
         .  
         .  #include <ostream>
         .  #include <vector>
         .  #include <algorithm>
         .  
         .  
         .  
         .  template <typename T1, typename T2>
 2,538,560  struct first_less : public std::binary_function<const std::pair<T1,T2> &, const std::pair<T1,T2> &, bool> {
19,112,260  	bool operator()( const std::pair<T1,T2> &a, const std::pair<T1,T2> &b ) { return a.first < b.first; }
         .  };
         .  
         .  
         .  template <typename T>
   403,752  class spvector {
         .  public:
         .  	typedef std::pair<size_t, T> nondefault_type;
         .  
         .  	typedef std::vector<nondefault_type> nondefaults_type;
         .  
         .  private:
         .  
         .  	nondefaults_type _p;
         .  	size_t _size;
         .  	T _def;
         .  
         .  public:
         .  
         .  
   124,592  	spvector() : _p(), _size(0), _def(T()) {}
         .  
   134,176  	explicit spvector( size_t n, T p ) : _p(), _size(n), _def(p) {}
         .  
         .  	template <typename TIterator>
         .  	spvector( TIterator begin, TIterator end, size_t sizeHint, T def=T() ) : _p(), _size(0), _def(def) {
         .  		if( sizeHint )
         .  			reserve( sizeHint );
         .  		size_t iter = 0;
         .  		for( TIterator it = begin; it != end; it++, iter++ )
         .  			if( *it != def )
-- line 43 ----------------------------------------
-- line 55 ----------------------------------------
         .  				push_back( i, v[i] );
         .  	}
         .  
         .  	typedef typename nondefaults_type::const_iterator const_iterator;
         .  	typedef typename nondefaults_type::iterator iterator;
         .  	typedef typename nondefaults_type::const_reverse_iterator const_reverse_iterator;
         .  	typedef typename nondefaults_type::reverse_iterator reverse_iterator;
         .  
    19,168  	iterator begin() { return _p.begin(); }
 1,092,208  	const_iterator begin() const { return _p.begin(); }
         .  
   555,488  	iterator end() { return _p.end(); }
37,828,656  	const_iterator end() const { return _p.end(); }
         .  
         .  	reverse_iterator rbegin() { return _p.rbegin(); }
         .  	const_reverse_iterator rbegin() const { return _p.rbegin(); }
         .  
         .  	reverse_iterator rend() { return _p.rend(); }
         .  	const_reverse_iterator rend() const { return _p.rend(); }
         .  
         .  
         .  
         .  	void reserve( size_t n ) { _p.reserve( n ); }
         .  
    39,534  	size_t size() const { return _size; }
         .  
     5,990  	void resize( size_t n ) {
     3,594  		_size = n;
    11,980  		if( _p.size() ) {
         .  			if( _p.back().first >= n ) {
         .  				iterator it = lower_bound( _p.begin(), _p.end(), std::make_pair(n, T()), first_less<size_t, T>() );
     3,594  				_p.resize( distance( _p.begin(), it ) );
         .  			}
         .  		}
         .  	}
         .  
         .  	iterator erase( iterator position ) {
         .  		return _p.erase( position );
         .  	}
         .  
   703,920  	void push_back( size_t idx, T val ) { _p.push_back( std::make_pair( idx, val ) ); }
         .  
         .  	void setDefault( T def ) { _def = def; }
         .  
         .  	T getDefault() const { return _def; }
         .  
     5,990  	void clearNonDef() { _p.clear(); }
         .  
   847,824  	void set( size_t i, T val ) {
   706,520  		DAI_ASSERT( i < _size );
 4,663,032  		iterator it = lower_bound( _p.begin(), _p.end(), std::make_pair(i, T()), first_less<size_t, T>() );
 3,073,946  		if( (it != _p.end()) && (it->first == i) ) {
         .  			// nondefault value already present
   227,560  			if( val == _def )
         .  				_p.erase( it );
         .  			else
   273,072  				it->second = val;
         .  		} else {
         .  			// no nondefault value present yet
   478,960  			if( val == _def )
         .  				; // do nothing
         .  			else
 1,860,792  				_p.insert( it, std::make_pair(i, val) );
         .  		}
         .  	}
         .  
   562,760  	T get( size_t i ) const {
   562,760  		DAI_ASSERT( i < _size );
 3,714,216  		const_iterator it = lower_bound( _p.begin(), _p.end(), std::make_pair(i, T()), first_less<size_t, T>() );
 2,661,738  		if( (it != _p.end()) && (it->first == i) )
 1,048,944  			return it->second;
         .  		else
   150,840  			return _def;
         .  	}
         .  
 1,913,384  	T operator[]( size_t i ) const { return get(i); }
         .  
         .  	bool operator==( const spvector<T>& q ) const {
         .  		if( size() != q.size() )
         .  			return false;
         .  		// OPTIMIZE
         .  		for( size_t i = 0; i < size(); i++ )
         .  			if( !(get(i) == q.get(i)) )
         .  				return false;
         .  		return true;
         .  	}
         .  
         .  	size_t nrNonDef() const { return _p.size(); }
         .  
    22,781  	size_t nrDef() const { return _size - _p.size(); }
         .  
 1,738,583  	T def() const { return _def; }
         .  
    26,955  	void setDef( T def ) { _def = def; }
         .  
         .  	const nondefaults_type & nonDef() const { return _p; }
         .  };
         .  
         .  
         .  template<class T>
         .  std::ostream& operator << (std::ostream& os, const spvector<T> &x) {
         .  	os << "(";
-- line 156 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_iterator_base_types.h
--------------------------------------------------------------------------------
        Ir 

-- line 72 ----------------------------------------
         .    /**
         .     *  @defgroup iterator_tags Iterator Tags
         .     *  These are empty types, used to distinguish different iterators.  The
         .     *  distinction is not made by what they contain, but simply by what they
         .     *  are.  Different underlying algorithms can then be used based on the
         .     *  different operations supporetd by different iterator types.
         .    */
         .    ///  Marking input iterators.
 7,596,145    struct input_iterator_tag {};
         .    ///  Marking output iterators.
         .    struct output_iterator_tag {};
         .    /// Forward iterators support a superset of input iterator operations.
15,192,290    struct forward_iterator_tag : public input_iterator_tag {};
         .    /// Bidirectional iterators support a superset of forward iterator
         .    /// operations.
15,192,290    struct bidirectional_iterator_tag : public forward_iterator_tag {};
         .    /// Random-access iterators support a superset of bidirectional iterator
         .    /// operations.
15,192,290    struct random_access_iterator_tag : public bidirectional_iterator_tag {};
         .    //@}
         .  
         .  
         .    /**
         .     *  @brief  Common %iterator class.
         .     *
         .     *  This class does nothing but define nested typedefs.  %Iterator classes
         .     *  can inherit from this class to save some work.  The typedefs are then
-- line 98 ----------------------------------------
-- line 99 ----------------------------------------
         .     *  used in specializations and overloading.
         .     *
         .     *  In particular, there are no default implementations of requirements
         .     *  such as @c operator++ and the like.  (How could there be?)
         .    */
         .    template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
         .             typename _Pointer = _Tp*, typename _Reference = _Tp&>
         .      struct iterator
    23,960      {
         .        /// One of the @link iterator_tags tag types@endlink.
         .        typedef _Category  iterator_category;
         .        /// The type "pointed to" by the iterator.
         .        typedef _Tp        value_type;
         .        /// Distance between iterators is represented as this type.
         .        typedef _Distance  difference_type;
         .        /// This type represents a pointer-to-value_type.
         .        typedef _Pointer   pointer;
-- line 115 ----------------------------------------
-- line 156 ----------------------------------------
         .    /**
         .     *  @if maint
         .     *  This function is not a part of the C++ standard but is syntactic
         .     *  sugar for internal library use only.
         .     *  @endif
         .    */
         .    template<typename _Iter>
         .      inline typename iterator_traits<_Iter>::iterator_category
 6,076,916      __iterator_category(const _Iter&)
 9,115,374      { return typename iterator_traits<_Iter>::iterator_category(); }
         .  
         .  _GLIBCXX_END_NAMESPACE
         .  
         .  #endif /* _ITERATOR_BASE_TYPES_H */
         .  

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/smallset.h
--------------------------------------------------------------------------------
         Ir 

-- line 23 ----------------------------------------
          .  
          .  
          .  /// Represents a set; the implementation is optimized for a small number of elements.
          .  /** SmallSet uses an ordered <tt>std::vector<</tt><em>T</em><tt>></tt> to represent a set; this is faster than
          .   *  using a <tt>std::set<</tt><em>T</em><tt>></tt> if the number of elements is small.
          .   *  \tparam T Should be less-than-comparable.
          .   */
          .  template <typename T>
  1,006,098  class SmallSet {
          .      private:
          .          /// The elements in this set
          .          std::vector<T> _elements;
          .  
          .      public:
          .      /// \name Constructors and destructors
          .      //@{
          .          /// Default constructor (constructs an empty set)
  1,365,240          SmallSet() : _elements() {}
          .  
          .          /// Construct a set consisting of one element
          .          SmallSet( const T &t ) : _elements() {
          .              _elements.push_back( t );
          .          }
          .  
          .          /// Construct a set consisting of two elements
          .          SmallSet( const T &t1, const T &t2 ) {
-- line 48 ----------------------------------------
-- line 84 ----------------------------------------
          .          }
          .  
          .          /// Erases \a t from \c *this
          .          SmallSet& erase( const T& t ) {
          .              return (*this /= t);
          .          }
          .  
          .          /// Set-minus operator: returns all elements in \c *this, except those in \a x
      8,386          SmallSet operator/ ( const SmallSet& x ) const {
      4,792              SmallSet res;
     94,642              std::set_difference( _elements.begin(), _elements.end(), x._elements.begin(), x._elements.end(), inserter( res._elements, res._elements.begin() ) );
      5,990              return res;
          .          }
          .  
          .          /// Set-union operator: returns all elements in \c *this, plus those in \a x
      8,386          SmallSet operator| ( const SmallSet& x ) const {
      4,792              SmallSet res;
     94,642              std::set_union( _elements.begin(), _elements.end(), x._elements.begin(), x._elements.end(), inserter( res._elements, res._elements.begin() ) );
      5,990              return res;
          .          }
          .  
          .          /// Set-intersection operator: returns all elements in \c *this that are also contained in \a x
     16,772          SmallSet operator& ( const SmallSet& x ) const {
      9,584              SmallSet res;
    189,284              std::set_intersection( _elements.begin(), _elements.end(), x._elements.begin(), x._elements.end(), inserter( res._elements, res._elements.begin() ) );
     11,980              return res;
          .          }
          .  
          .          /// Erases from \c *this all elements in \a x
          .          SmallSet& operator/= ( const SmallSet& x ) {
          .              return (*this = (*this / x));
          .          }
          .  
          .          /// Erases one element
-- line 117 ----------------------------------------
-- line 124 ----------------------------------------
          .          }
          .  
          .          /// Adds to \c *this all elements in \a x
          .          SmallSet& operator|= ( const SmallSet& x ) {
          .              return( *this = (*this | x) );
          .          }
          .  
          .          /// Adds one element
    930,080          SmallSet& operator|= ( const T& t ) {
  4,092,352              typename std::vector<T>::iterator pos = lower_bound( _elements.begin(), _elements.end(), t );
  3,906,336              if( pos == _elements.end() || *pos != t ) // insert it
  1,674,144                  _elements.insert( pos, t );
  1,488,128              return *this;
          .          }
          .  
          .          /// Erases from \c *this all elements not in \a x
          .          SmallSet& operator&= ( const SmallSet& x ) {
          .              return (*this = (*this & x));
          .          }
          .  
          .          /// Returns \c true if \c *this is a subset of \a x
-- line 144 ----------------------------------------
-- line 184 ----------------------------------------
          .          /// Constant reverse iterator over the elements
          .          typedef typename std::vector<T>::const_reverse_iterator const_reverse_iterator;
          .          /// Reverse iterator over the elements
          .          typedef typename std::vector<T>::reverse_iterator reverse_iterator;
          .  
          .      /// \name Iterator interface
          .      //@{
          .          /// Returns iterator that points to the first element
 33,402,880          iterator begin() { return _elements.begin(); }
          .          /// Returns constant iterator that points to the first element
 38,461,312          const_iterator begin() const { return _elements.begin(); }
          .  
          .          /// Returns iterator that points beyond the last element
 70,074,368          iterator end() { return _elements.end(); }
          .          /// Returns constant iterator that points beyond the last element
118,409,344          const_iterator end() const { return _elements.end(); }
          .  
          .          /// Returns reverse iterator that points to the last element
          .          reverse_iterator rbegin() { return _elements.rbegin(); }
          .          /// Returns constant reverse iterator that points to the last element
          .          const_reverse_iterator rbegin() const { return _elements.rbegin(); }
          .  
          .          /// Returns reverse iterator that points beyond the first element
          .          reverse_iterator rend() { return _elements.rend(); }
-- line 207 ----------------------------------------
-- line 217 ----------------------------------------
          .          T& back() { return _elements.back(); }
          .          /// Returns constant reference to last element
          .          const T& back() const { return _elements.back(); }
          .      //@}
          .  
          .      /// \name Comparison operators
          .      //@{
          .          /// Returns \c true if \a a and \a b are identical
     17,970          friend bool operator==( const SmallSet &a, const SmallSet &b ) {
     53,910              return (a._elements == b._elements);
          .          }
          .  
          .          /// Returns \c true if \a a and \a b are not identical
          .          friend bool operator!=( const SmallSet &a, const SmallSet &b ) {
          .              return !(a._elements == b._elements);
          .          }
          .  
          .          /// Lexicographical comparison of elements
-- line 234 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /opt/local/include/gmp.h
--------------------------------------------------------------------------------
        Ir 

-- line 1734 ----------------------------------------
         .  }
         .  #endif
         .  
         .  #if defined (__GMP_EXTERN_INLINE) || defined (__GMP_FORCE_mpz_get_ui)
         .  #if ! defined (__GMP_FORCE_mpz_get_ui)
         .  __GMP_EXTERN_INLINE
         .  #endif
         .  unsigned long
13,533,534  mpz_get_ui (mpz_srcptr __gmp_z) __GMP_NOTHROW
         .  {
13,533,534    mp_ptr __gmp_p = __gmp_z->_mp_d;
18,044,712    mp_size_t __gmp_n = __gmp_z->_mp_size;
13,533,534    mp_limb_t __gmp_l = __gmp_p[0];
         .    /* This is a "#if" rather than a plain "if" so as to avoid gcc warnings
         .       about "<< GMP_NUMB_BITS" exceeding the type size, and to avoid Borland
         .       C++ 6.0 warnings about condition always true for something like
         .       "__GMP_ULONG_MAX < GMP_NUMB_MASK".  */
         .  #if GMP_NAIL_BITS == 0 || defined (_LONG_LONG_LIMB)
         .    /* limb==long and no nails, or limb==longlong, one limb is enough */
66,229,420    return (__gmp_n != 0 ? __gmp_l : 0);
         .  #else
         .    /* limb==long and nails, need two limbs when available */
         .    __gmp_n = __GMP_ABS (__gmp_n);
         .    if (__gmp_n <= 1)
         .      return (__gmp_n != 0 ? __gmp_l : 0);
         .    else
         .      return __gmp_l + (__gmp_p[1] << GMP_NUMB_BITS);
         .  #endif
-- line 1761 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /Users/igor/Documents/Projects/anomaly/code/HSMM/libdai/include/dai/var.h
--------------------------------------------------------------------------------
         Ir 

-- line 28 ----------------------------------------
          .   *  is assumed that they have the same number of possible states).
          .   *
          .   *  In the documentation, we use the following notational conventions. The discrete
          .   *  random variable with label \f$l\f$ is denoted as \f$x_l\f$, and the number
          .   *  of possible values of this variable as \f$S_l\f$; this is represented in
          .   *  code by the object Var(\f$l\f$,\f$S_l\f$). The set of possible values of
          .   *  variable \f$x_l\f$ is denoted \f$X_l := \{0,1,\dots,S_l-1\}\f$.
          .   */
  2,042,810  class Var {
          .      private:
          .          /// Label of the variable (its unique ID)
          .          size_t  _label;
          .  
          .          /// Number of possible values
          .          size_t  _states;
          .  
          .      public:
-- line 44 ----------------------------------------
-- line 48 ----------------------------------------
          .          Var( size_t label, size_t states ) : _label(label), _states(states) {}
          .  
          .          /// Returns the label
          .          size_t label() const { return _label; }
          .          /// Returns reference to label
          .          size_t& label() { return _label; }
          .  
          .          /// Returns the number of states
101,862,640          size_t states() const { return _states; }
          .          /// Returns reference to number of states
          .          size_t& states() { return _states; }
          .  
          .          /// Smaller-than operator (only compares labels)
103,533,935          bool operator< ( const Var& n ) const { 
          .  #ifdef DAI_DEBUG
124,240,722              if( _label == n._label )
 62,594,424                  DAI_ASSERT( _states == n._states );
          .  #endif
331,308,592              return( _label < n._label );
          .          }
          .  
          .          /// Larger-than operator (only compares labels)
          .          bool operator> ( const Var& n ) const { 
          .  #ifdef DAI_DEBUG
          .              if( _label == n._label )
          .                  DAI_ASSERT( _states == n._states );
          .  #endif
-- line 74 ----------------------------------------
-- line 98 ----------------------------------------
          .  #ifdef DAI_DEBUG
          .              if( _label == n._label )
          .                  DAI_ASSERT( _states == n._states );
          .  #endif
          .              return( _label != n._label );
          .          }
          .  
          .          /// Equal-to operator (only compares labels)
      9,980          bool operator== ( const Var& n ) const {
          .  #ifdef DAI_DEBUG
     11,976              if( _label == n._label )
     11,976                  DAI_ASSERT( _states == n._states );
          .  #endif
     31,936              return( _label == n._label );
          .          }
          .  
          .          /// Writes a Var to an output stream
          .          friend std::ostream& operator << ( std::ostream& os, const Var& n ) {
          .              return( os << "x" << n.label() );
          .          }
          .  };
          .  
-- line 119 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_iterator.h
--------------------------------------------------------------------------------
         Ir 

-- line 545 ----------------------------------------
          .      public:
          .        /// A nested typedef for the type of whatever container you used.
          .        typedef _Container          container_type;
          .  
          .        /**
          .         *  The only way to create this %iterator is with a container and an
          .         *  initial position (a normal %iterator into the container).
          .        */
     28,752        insert_iterator(_Container& __x, typename _Container::iterator __i)
     57,504        : container(&__x), iter(__i) {}
          .  
          .        /**
          .         *  @param  value  An instance of whatever type
          .         *                 container_type::const_reference is; presumably a
          .         *                 reference-to-const T for container<T>.
          .         *  @return  This %iterator, for chained operations.
          .         *
          .         *  This kind of %iterator maintains its own position in the
-- line 562 ----------------------------------------
-- line 572 ----------------------------------------
          .         *     i = 1;
          .         *     i = 2;
          .         *     i = 3;
          .         *
          .         *     // vector v contains A, 1, 2, 3, and Z
          .         *  @endcode
          .        */
          .        insert_iterator&
     43,920        operator=(const typename _Container::const_reference __value)
          .        {
    105,408  	iter = container->insert(iter, __value);
     43,920  	++iter;
     70,272  	return *this;
          .        }
          .  
          .        /// Simply returns *this.
          .        insert_iterator&
     26,352        operator*()
     61,488        { return *this; }
          .  
          .        /// Simply returns *this.  (This %iterator does not "move".)
          .        insert_iterator&
     26,352        operator++()
     61,488        { return *this; }
          .  
          .        /// Simply returns *this.  (This %iterator does not "move".)
          .        insert_iterator&
          .        operator++(int)
          .        { return *this; }
          .      };
          .  
          .    /**
-- line 603 ----------------------------------------
-- line 608 ----------------------------------------
          .     *  Typing the name of the %iterator requires knowing the precise full
          .     *  type of the container, which can be tedious and impedes generic
          .     *  programming.  Using this function lets you take advantage of automatic
          .     *  template parameter deduction, making the compiler match the correct
          .     *  types for you.
          .    */
          .    template<typename _Container, typename _Iterator>
          .      inline insert_iterator<_Container>
     23,960      inserter(_Container& __x, _Iterator __i)
          .      {
          .        return insert_iterator<_Container>(__x,
    110,216  					 typename _Container::iterator(__i));
          .      }
          .  
          .  _GLIBCXX_END_NAMESPACE
          .  
          .  _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)
          .  
          .    // This iterator adapter is 'normal' in the sense that it does not
          .    // change the semantics of any of the operators of its iterator
-- line 627 ----------------------------------------
-- line 642 ----------------------------------------
          .        typedef typename iterator_traits<_Iterator>::iterator_category
          .                                                               iterator_category;
          .        typedef typename iterator_traits<_Iterator>::value_type  value_type;
          .        typedef typename iterator_traits<_Iterator>::difference_type
          .                                                               difference_type;
          .        typedef typename iterator_traits<_Iterator>::reference reference;
          .        typedef typename iterator_traits<_Iterator>::pointer   pointer;
          .  
  3,079,104        __normal_iterator() : _M_current(_Iterator()) { }
          .  
          .        explicit
304,543,220        __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
          .  
          .        // Allow iterator to const_iterator conversion
          .        template<typename _Iter>
          .          __normal_iterator(const __normal_iterator<_Iter,
          .  			  typename __enable_if<
          .        	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 10,438,400  		      _Container>::__type>& __i)
 18,789,120          : _M_current(__i.base()) { }
          .  
          .        // Forward iterator requirements
          .        reference
 32,749,488        operator*() const
 87,331,968        { return *_M_current; }
          .  
          .        pointer
 36,400,248        operator->() const
 97,067,328        { return _M_current; }
          .  
          .        __normal_iterator&
  3,225,528        operator++()
          .        {
  6,451,056  	++_M_current;
  7,526,232  	return *this;
          .        }
          .  
          .        __normal_iterator
 57,709,608        operator++(int)
192,365,360        { return __normal_iterator(_M_current++); }
          .  
          .        // Bidirectional iterator requirements
          .        __normal_iterator&
          .        operator--()
          .        {
          .  	--_M_current;
          .  	return *this;
          .        }
-- line 689 ----------------------------------------
-- line 693 ----------------------------------------
          .        { return __normal_iterator(_M_current--); }
          .  
          .        // Random access iterator requirements
          .        reference
          .        operator[](const difference_type& __n) const
          .        { return _M_current[__n]; }
          .  
          .        __normal_iterator&
  4,317,428        operator+=(const difference_type& __n)
 17,269,712        { _M_current += __n; return *this; }
          .  
          .        __normal_iterator
          .        operator+(const difference_type& __n) const
          .        { return __normal_iterator(_M_current + __n); }
          .  
          .        __normal_iterator&
          .        operator-=(const difference_type& __n)
          .        { _M_current -= __n; return *this; }
          .  
          .        __normal_iterator
          .        operator-(const difference_type& __n) const
          .        { return __normal_iterator(_M_current - __n); }
          .  
          .        const _Iterator&
101,862,066        base() const
237,678,154        { return _M_current; }
          .      };
          .  
          .    // Note: In what follows, the left- and right-hand-side iterators are
          .    // allowed to vary in types (conceptually in cv-qualification) so that
          .    // comparaison between cv-qualified and non-cv-qualified iterators be
          .    // valid.  However, the greedy and unfriendly operators in std::rel_ops
          .    // will make overload resolution ambiguous (when in scope) if we don't
          .    // provide overloads whose operands are of the same type.  Can someone
-- line 726 ----------------------------------------
-- line 731 ----------------------------------------
          .      inline bool
          .      operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .  	       const __normal_iterator<_IteratorR, _Container>& __rhs)
          .      { return __lhs.base() == __rhs.base(); }
          .  
          .    template<typename _Iterator, typename _Container>
          .      inline bool
          .      operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
  1,335,190  	       const __normal_iterator<_Iterator, _Container>& __rhs)
  5,874,836      { return __lhs.base() == __rhs.base(); }
          .  
          .    template<typename _IteratorL, typename _IteratorR, typename _Container>
          .      inline bool
          .      operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 21,898,240  	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 96,352,256      { return __lhs.base() != __rhs.base(); }
          .  
          .    template<typename _Iterator, typename _Container>
          .      inline bool
          .      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 51,604,490  	       const __normal_iterator<_Iterator, _Container>& __rhs)
227,059,756      { return __lhs.base() != __rhs.base(); }
          .  
          .    // Random access iterator requirements
          .    template<typename _IteratorL, typename _IteratorR, typename _Container>
          .      inline bool
          .      operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .  	      const __normal_iterator<_IteratorR, _Container>& __rhs)
          .      { return __lhs.base() < __rhs.base(); }
          .  
-- line 760 ----------------------------------------
-- line 808 ----------------------------------------
          .      inline typename __normal_iterator<_IteratorL, _Container>::difference_type
          .      operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .  	      const __normal_iterator<_IteratorR, _Container>& __rhs)
          .      { return __lhs.base() - __rhs.base(); }
          .  
          .    template<typename _Iterator, typename _Container>
          .      inline typename __normal_iterator<_Iterator, _Container>::difference_type
          .      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  3,652,320  	      const __normal_iterator<_Iterator, _Container>& __rhs)
 16,070,208      { return __lhs.base() - __rhs.base(); }
          .  
          .    template<typename _Iterator, typename _Container>
          .      inline __normal_iterator<_Iterator, _Container>
          .      operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
          .  	      __n, const __normal_iterator<_Iterator, _Container>& __i)
          .      { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
          .  
          .  _GLIBCXX_END_NAMESPACE
-- line 825 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/4.2.1/bits/stl_construct.h
--------------------------------------------------------------------------------
        Ir 

-- line 69 ----------------------------------------
         .    /**
         .     * @if maint
         .     * Constructs an object in existing memory by invoking an allocated
         .     * object's constructor with an initializer.
         .     * @endif
         .     */
         .    template<typename _T1, typename _T2>
         .      inline void
 2,926,560      _Construct(_T1* __p, const _T2& __value)
         .      {
         .        // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .        // 402. wrong new expression in [some_]allocator::construct
12,291,552        ::new(static_cast<void*>(__p)) _T1(__value);
         .      }
         .  
         .    /**
         .     * @if maint
         .     * Constructs an object in existing memory by invoking an allocated
         .     * object's default constructor (no initializers).
         .     * @endif
         .     */
-- line 89 ----------------------------------------
-- line 98 ----------------------------------------
         .  
         .    /**
         .     * @if maint
         .     * Destroy the object pointed to by a pointer type.
         .     * @endif
         .     */
         .    template<typename _Tp>
         .      inline void
 3,589,856      _Destroy(_Tp* __pointer)
 5,384,784      { __pointer->~_Tp(); }
         .  
         .    /**
         .     * @if maint
         .     * Destroy a range of objects with nontrivial destructors.
         .     *
         .     * This is a helper function used only by _Destroy().
         .     * @endif
         .     */
         .    template<typename _ForwardIterator>
         .      inline void
         .      __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
 1,605,800  		  __false_type)
         .      {
 8,853,834        for (; __first != __last; ++__first)
 3,675,072  	std::_Destroy(&*__first);
         .      }
         .  
         .    /**
         .     * @if maint
         .     * Destroy a range of objects with trivial destructors.  Since the destructors
         .     * are trivial, there's nothing to do and hopefully this function will be
         .     * entirely optimized away.
         .     *
-- line 130 ----------------------------------------
-- line 140 ----------------------------------------
         .     * @if maint
         .     * Destroy a range of objects.  If the value_type of the object has
         .     * a trivial destructor, the compiler should optimize all of this
         .     * away, otherwise the objects' destructors must be invoked.
         .     * @endif
         .     */
         .    template<typename _ForwardIterator>
         .      inline void
 1,605,800      _Destroy(_ForwardIterator __first, _ForwardIterator __last)
         .      {
         .        typedef typename iterator_traits<_ForwardIterator>::value_type
         .                         _Value_type;
         .        typedef typename std::__is_scalar<_Value_type>::__type
         .  	               _Has_trivial_destructor;
         .  
 3,853,920        std::__destroy_aux(__first, __last, _Has_trivial_destructor());
         .      }
         .  
         .    /**
         .     * @if maint
         .     * Destroy a range of objects using the supplied allocator.  For
         .     * nondefault allocators we do not optimize away invocation of 
         .     * destroy() even if _Tp has a trivial destructor.
         .     * @endif
-- line 163 ----------------------------------------
-- line 172 ----------------------------------------
         .      {
         .        for (; __first != __last; ++__first)
         .  	__alloc.destroy(&*__first);
         .      }
         .  
         .    template<typename _ForwardIterator, typename _Tp>
         .      inline void
         .      _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 1,926,960  	     allocator<_Tp>)
         .      {
 2,569,280        _Destroy(__first, __last);
         .      }
         .  
         .  _GLIBCXX_END_NAMESPACE
         .  
         .  #endif /* _STL_CONSTRUCT_H */
         .  

--------------------------------------------------------------------------------
Ir 
--------------------------------------------------------------------------------
43  percentage of events annotated

